/* FormsPlSql.java */
/* Generated By:JavaCC: Do not edit this line. FormsPlSql.java */
package br.pucrio.tecgraf.plsql.lng.grammer;

import java.util.*;
import br.pucrio.tecgraf.plsql.lng.node.*;
import java.io.* ;
import java.util.* ;

@ SuppressWarnings("all")
public class FormsPlSql implements FormsPlSqlConstants {

  final public void SqlFile() throws ParseException {
    trace_call("SqlFile");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CREATE:{
        PackageDeclaration();
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case O_SLASH:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          jj_consume_token(O_SLASH);
          PackageDeclaration();
        }
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    } finally {
      trace_return("SqlFile");
    }
  }

  final public PackagePlsqlNode PackageDeclaration() throws ParseException {
    trace_call("PackageDeclaration");
    try {Token createToken;
  //PlsqlToken replaceToken = null;
  Token packageToken;
  //PlsqlToken asToken = null;
  Token endToken;
  //ObjectNamePlsqlNode dottedName = null;
  String schema = null;
  String packageName = null;
  //List < PackageDeclarationPlsqlNode > declarations = new ArrayList < PackageDeclarationPlsqlNode > ();
  //PackageDeclarationPlsqlNode declaration = null;

      createToken = jj_consume_token(K_CREATE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_OR:{
        jj_consume_token(K_OR);
        jj_consume_token(K_REPLACE);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      packageToken = jj_consume_token(K_PACKAGE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_BODY:{
        jj_consume_token(K_BODY);
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_DOT:{
        jj_consume_token(O_DOT);
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_AS:{
        jj_consume_token(K_AS);
        break;
        }
      case K_IS:{
        jj_consume_token(K_IS);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_BEGIN:
        case K_CLOSE:
        case K_COMMIT:
        case K_DECLARE:
        case K_DELETE:
        case K_EXIT:
        case K_FETCH:
        case K_FOR:
        case K_FUNCTION:
        case K_GOTO:
        case K_IF:
        case K_INSERT:
        case K_LOCK:
        case K_LOOP:
        case K_NULL:
        case K_OPEN:
        case K_PROCEDURE:
        case K_RAISE:
        case K_RETURN:
        case K_ROLLBACK:
        case K_SAVEPOINT:
        case K_SELECT:
        case K_SET:
        case K_TYPE:
        case K_UPDATE:
        case K_WHILE:
        case S_IDENTIFIER:
        case S_BIND:
        case 160:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        PackageBody();
      }
      endToken = jj_consume_token(K_END);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
{if ("" != null) return null;}//return factory.createPackagePlsqlNode(factory.createToken(createToken), replaceToken, factory.createToken(packageToken), dottedName, asToken, declarations, factory.createToken(endToken));

    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PackageDeclaration");
    }
  }

  final public void PackageBody() throws ParseException {
    trace_call("PackageBody");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_PROCEDURE:{
        ProcedureDeclaration();
        break;
        }
      case K_FUNCTION:{
        FunctionDeclaration();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        if (jj_2_1(2)) {
          SequenceOfStatements();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_TYPE:{
            TypeDefinition();
            break;
            }
          case S_IDENTIFIER:{
            ConstantDefinition();
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("PackageBody");
    }
  }

  final public void DeclarationSection() throws ParseException {
    trace_call("DeclarationSection");
    try {
      jj_consume_token(K_DECLARE);
      Declarations();
    } finally {
      trace_return("DeclarationSection");
    }
  }

  final public void Declarations() throws ParseException {
    trace_call("Declarations");
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:{
          IdentifierDeclaration();
          break;
          }
        case K_CURSOR:{
          CursorDeclaration();
          break;
          }
        case K_PRAGMA:{
          PragmaDeclaration();
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(O_SEMICOLON);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_CURSOR:
        case K_PRAGMA:
        case S_IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_3;
        }
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_FUNCTION:
        case K_PROCEDURE:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_PROCEDURE:{
          ProcedureDeclaration();
          break;
          }
        case K_FUNCTION:{
          FunctionDeclaration();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("Declarations");
    }
  }

  final public void IdentifierDeclaration() throws ParseException {
    trace_call("IdentifierDeclaration");
    try {
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CONSTANT:{
        ConstantDeclaration();
        break;
        }
      case K_BINARY_INTEGER:
      case K_BOOLEAN:
      case K_CHAR:
      case K_DATE:
      case K_FLOAT:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_REAL:
      case K_VARCHAR2:
      case K_VARCHAR:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        VariableDeclaration();
        break;
        }
      case K_EXCEPTION:{
        ExceptionDeclaration();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("IdentifierDeclaration");
    }
  }

  final public void CursorDeclaration() throws ParseException {
    trace_call("CursorDeclaration");
    try {
      jj_consume_token(K_CURSOR);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_OPENPAREN:{
        jj_consume_token(O_OPENPAREN);
        ParameterList();
        jj_consume_token(O_CLOSEPAREN);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(K_IS);
      SelectStatement();
    } finally {
      trace_return("CursorDeclaration");
    }
  }

  final public void ProcedureDeclaration() throws ParseException {
    trace_call("ProcedureDeclaration");
    try {
      jj_consume_token(K_PROCEDURE);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_OPENPAREN:{
        jj_consume_token(O_OPENPAREN);
        ParameterList();
        jj_consume_token(O_CLOSEPAREN);
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_SEMICOLON:{
        jj_consume_token(O_SEMICOLON);
        break;
        }
      case K_IS:{
        jj_consume_token(K_IS);
        ProcedureBody();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("ProcedureDeclaration");
    }
  }

  final public void ProcedureBody() throws ParseException {
    trace_call("ProcedureBody");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CURSOR:
      case K_PRAGMA:
      case S_IDENTIFIER:{
        Declarations();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      BeginEndBlock();
    } finally {
      trace_return("ProcedureBody");
    }
  }

  final public void FunctionDeclaration() throws ParseException {
    trace_call("FunctionDeclaration");
    try {
      jj_consume_token(K_FUNCTION);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_OPENPAREN:{
        jj_consume_token(O_OPENPAREN);
        ParameterList();
        jj_consume_token(O_CLOSEPAREN);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(K_RETURN);
      TypeDeclaration();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_SEMICOLON:{
        jj_consume_token(O_SEMICOLON);
        break;
        }
      case K_IS:{
        jj_consume_token(K_IS);
        FunctionBody();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("FunctionDeclaration");
    }
  }

  final public void FunctionBody() throws ParseException {
    trace_call("FunctionBody");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CURSOR:
      case K_PRAGMA:
      case S_IDENTIFIER:{
        Declarations();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      BeginEndBlock();
    } finally {
      trace_return("FunctionBody");
    }
  }

  final public void PragmaDeclaration() throws ParseException {
    trace_call("PragmaDeclaration");
    try {
      jj_consume_token(K_PRAGMA);
      jj_consume_token(K_EXCEPTION_INIT);
      jj_consume_token(O_OPENPAREN);
      NumOrID();
      jj_consume_token(O_COMMA);
      NumOrID();
      jj_consume_token(O_CLOSEPAREN);
    } finally {
      trace_return("PragmaDeclaration");
    }
  }

  final public void VariableDeclaration() throws ParseException {
    trace_call("VariableDeclaration");
    try {
      TypeDeclaration();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        jj_consume_token(K_NULL);
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_ASSIGN:
      case K_DEFAULT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_ASSIGN:{
          jj_consume_token(O_ASSIGN);
          break;
          }
        case K_DEFAULT:{
          jj_consume_token(K_DEFAULT);
          break;
          }
        default:
          jj_la1[23] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlExpression();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
    } finally {
      trace_return("VariableDeclaration");
    }
  }

  final public void ConstantDeclaration() throws ParseException {
    trace_call("ConstantDeclaration");
    try {
      jj_consume_token(K_CONSTANT);
      TypeDeclaration();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        jj_consume_token(K_NULL);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_ASSIGN:{
        jj_consume_token(O_ASSIGN);
        break;
        }
      case K_DEFAULT:{
        jj_consume_token(K_DEFAULT);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      PlSqlExpression();
    } finally {
      trace_return("ConstantDeclaration");
    }
  }

  final public void TypeDeclaration() throws ParseException {
    trace_call("TypeDeclaration");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_BINARY_INTEGER:
      case K_BOOLEAN:
      case K_CHAR:
      case K_DATE:
      case K_FLOAT:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_REAL:
      case K_VARCHAR2:
      case K_VARCHAR:{
        BasicDataTypeDeclaration();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        if (jj_2_2(2)) {
          jj_consume_token(S_IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 158:{
            jj_consume_token(158);
            break;
            }
          case 159:{
            jj_consume_token(159);
            break;
            }
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else if (jj_2_3(2147483647)) {
          TableColumn();
          jj_consume_token(158);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:{
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("TypeDeclaration");
    }
  }

  final public void BasicDataTypeDeclaration() throws ParseException {
    trace_call("BasicDataTypeDeclaration");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CHAR:
      case K_FLOAT:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_REAL:
      case K_VARCHAR2:
      case K_VARCHAR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_CHAR:{
          jj_consume_token(K_CHAR);
          break;
          }
        case K_VARCHAR:{
          jj_consume_token(K_VARCHAR);
          break;
          }
        case K_VARCHAR2:{
          jj_consume_token(K_VARCHAR2);
          break;
          }
        case K_INTEGER:{
          jj_consume_token(K_INTEGER);
          break;
          }
        case K_NUMBER:{
          jj_consume_token(K_NUMBER);
          break;
          }
        case K_NATURAL:{
          jj_consume_token(K_NATURAL);
          break;
          }
        case K_REAL:{
          jj_consume_token(K_REAL);
          break;
          }
        case K_FLOAT:{
          jj_consume_token(K_FLOAT);
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_OPENPAREN:{
          jj_consume_token(O_OPENPAREN);
          jj_consume_token(S_NUMBER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case O_COMMA:{
            jj_consume_token(O_COMMA);
            jj_consume_token(S_NUMBER);
            break;
            }
          default:
            jj_la1[31] = jj_gen;
            ;
          }
          jj_consume_token(O_CLOSEPAREN);
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        break;
        }
      case K_DATE:{
        jj_consume_token(K_DATE);
        break;
        }
      case K_BINARY_INTEGER:{
        jj_consume_token(K_BINARY_INTEGER);
        break;
        }
      case K_BOOLEAN:{
        jj_consume_token(K_BOOLEAN);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("BasicDataTypeDeclaration");
    }
  }

  final public void TypeDefinition() throws ParseException {
    trace_call("TypeDefinition");
    try {
      jj_consume_token(K_TYPE);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IS);
      jj_consume_token(K_REF);
      jj_consume_token(K_CURSOR);
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("TypeDefinition");
    }
  }

  final public void ConstantDefinition() throws ParseException {
    trace_call("ConstantDefinition");
    try {
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_CONSTANT);
      TypeDeclaration();
      jj_consume_token(O_ASSIGN);
      PlSqlSimpleExpression();
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("ConstantDefinition");
    }
  }

  final public void ExceptionDeclaration() throws ParseException {
    trace_call("ExceptionDeclaration");
    try {
      jj_consume_token(K_EXCEPTION);
    } finally {
      trace_return("ExceptionDeclaration");
    }
  }

/* ---------------- DECLARATIONS SECTION ends here ------------------ */

/* ---------------- Code Section starts here ---------------------- */
  final public 
void BeginEndBlock() throws ParseException {
    trace_call("BeginEndBlock");
    try {
      jj_consume_token(K_BEGIN);
      SequenceOfStatements();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_EXCEPTION:{
        ExceptionBlock();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(K_END);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("BeginEndBlock");
    }
  }

  final public void SequenceOfStatements() throws ParseException {
    trace_call("SequenceOfStatements");
    try {
      label_5:
      while (true) {
        PLSQLStatement();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_BEGIN:
        case K_CLOSE:
        case K_COMMIT:
        case K_DECLARE:
        case K_DELETE:
        case K_EXIT:
        case K_FETCH:
        case K_FOR:
        case K_GOTO:
        case K_IF:
        case K_INSERT:
        case K_LOCK:
        case K_LOOP:
        case K_NULL:
        case K_OPEN:
        case K_RAISE:
        case K_RETURN:
        case K_ROLLBACK:
        case K_SAVEPOINT:
        case K_SELECT:
        case K_SET:
        case K_UPDATE:
        case K_WHILE:
        case S_IDENTIFIER:
        case S_BIND:
        case 160:{
          ;
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          break label_5;
        }
      }
    } finally {
      trace_return("SequenceOfStatements");
    }
  }

  final public void ExceptionBlock() throws ParseException {
    trace_call("ExceptionBlock");
    try {
      jj_consume_token(K_EXCEPTION);
      label_6:
      while (true) {
        ExceptionHandler();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_WHEN:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_6;
        }
      }
    } finally {
      trace_return("ExceptionBlock");
    }
  }

  final public void ExceptionHandler() throws ParseException {
    trace_call("ExceptionHandler");
    try {
      jj_consume_token(K_WHEN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_OR:{
            ;
            break;
            }
          default:
            jj_la1[38] = jj_gen;
            break label_7;
          }
          jj_consume_token(K_OR);
          jj_consume_token(S_IDENTIFIER);
        }
        break;
        }
      case K_OTHERS:{
        jj_consume_token(K_OTHERS);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(K_THEN);
      SequenceOfStatements();
    } finally {
      trace_return("ExceptionHandler");
    }
  }

  final public void PLSQLStatement() throws ParseException {
    trace_call("PLSQLStatement");
    try {
      if (jj_2_4(2147483647)) {
        SubroutineCall();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:
        case S_BIND:{
          AssignmentStatement();
          break;
          }
        case K_EXIT:{
          ExitStatement();
          break;
          }
        case K_GOTO:{
          GotoStatement();
          break;
          }
        case K_IF:{
          IfStatement();
          break;
          }
        case K_FOR:
        case K_LOOP:
        case K_WHILE:{
          LoopStatement();
          break;
          }
        case K_NULL:{
          NullStatement();
          break;
          }
        case K_RAISE:{
          RaiseStatement();
          break;
          }
        case K_RETURN:{
          ReturnStatement();
          break;
          }
        case K_CLOSE:
        case K_COMMIT:
        case K_DELETE:
        case K_FETCH:
        case K_INSERT:
        case K_LOCK:
        case K_OPEN:
        case K_ROLLBACK:
        case K_SAVEPOINT:
        case K_SELECT:
        case K_SET:
        case K_UPDATE:{
          SQLStatement();
          break;
          }
        case 160:{
          LabelDeclaration();
          break;
          }
        case K_BEGIN:
        case K_DECLARE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_DECLARE:{
            DeclarationSection();
            break;
            }
          default:
            jj_la1[40] = jj_gen;
            ;
          }
          BeginEndBlock();
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("PLSQLStatement");
    }
  }

  final public void LabelDeclaration() throws ParseException {
    trace_call("LabelDeclaration");
    try {
      jj_consume_token(160);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(161);
    } finally {
      trace_return("LabelDeclaration");
    }
  }

  final public void SQLStatement() throws ParseException {
    trace_call("SQLStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CLOSE:{
        CloseStatement();
        break;
        }
      case K_COMMIT:{
        CommitStatement();
        break;
        }
      case K_DELETE:{
        DeleteStatement();
        break;
        }
      case K_FETCH:{
        FetchStatement();
        break;
        }
      case K_INSERT:{
        InsertStatement();
        break;
        }
      case K_LOCK:{
        LockTableStatement();
        break;
        }
      case K_OPEN:{
        OpenStatement();
        break;
        }
      case K_ROLLBACK:{
        RollbackStatement();
        break;
        }
      case K_SAVEPOINT:{
        SavepointStatement();
        break;
        }
      case K_SELECT:{
        QueryStatement();
        break;
        }
      case K_SET:{
        SetTransactionStatement();
        break;
        }
      case K_UPDATE:{
        UpdateStatement();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("SQLStatement");
    }
  }

  final public void SubroutineCall() throws ParseException {
    trace_call("SubroutineCall");
    try {
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_DOT:{
        jj_consume_token(O_DOT);
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_OPENPAREN:{
        jj_consume_token(O_OPENPAREN);
        Arguments();
        jj_consume_token(O_CLOSEPAREN);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("SubroutineCall");
    }
  }

  final public void AssignmentStatement() throws ParseException {
    trace_call("AssignmentStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_DOT:{
          jj_consume_token(O_DOT);
          jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_OPENPAREN:{
          jj_consume_token(O_OPENPAREN);
          PlSqlSimpleExpression();
          jj_consume_token(O_CLOSEPAREN);
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          ;
        }
        jj_consume_token(O_ASSIGN);
        PlSqlExpression();
        break;
        }
      case S_BIND:{
        jj_consume_token(S_BIND);
        jj_consume_token(O_ASSIGN);
        PlSqlExpression();
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("AssignmentStatement");
    }
  }

  final public void ExitStatement() throws ParseException {
    trace_call("ExitStatement");
    try {
      jj_consume_token(K_EXIT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHEN:{
        jj_consume_token(K_WHEN);
        PlSqlExpression();
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("ExitStatement");
    }
  }

  final public void GotoStatement() throws ParseException {
    trace_call("GotoStatement");
    try {
      jj_consume_token(K_GOTO);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("GotoStatement");
    }
  }

  final public void IfStatement() throws ParseException {
    trace_call("IfStatement");
    try {
      jj_consume_token(K_IF);
      PlSqlExpression();
      jj_consume_token(K_THEN);
      SequenceOfStatements();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ELSIF:{
          ;
          break;
          }
        default:
          jj_la1[50] = jj_gen;
          break label_8;
        }
        jj_consume_token(K_ELSIF);
        PlSqlExpression();
        jj_consume_token(K_THEN);
        SequenceOfStatements();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ELSE:{
        jj_consume_token(K_ELSE);
        SequenceOfStatements();
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      jj_consume_token(K_END);
      jj_consume_token(K_IF);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("IfStatement");
    }
  }

  final public void LoopStatement() throws ParseException {
    trace_call("LoopStatement");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_LOOP:{
        NormalLoop();
        break;
        }
      case K_WHILE:{
        WhileLoop();
        break;
        }
      case K_FOR:{
        ForLoop();
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("LoopStatement");
    }
  }

  final public void NormalLoop() throws ParseException {
    trace_call("NormalLoop");
    try {
      jj_consume_token(K_LOOP);
      SequenceOfStatements();
      jj_consume_token(K_END);
      jj_consume_token(K_LOOP);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("NormalLoop");
    }
  }

  final public void WhileLoop() throws ParseException {
    trace_call("WhileLoop");
    try {
      jj_consume_token(K_WHILE);
      PlSqlExpression();
      NormalLoop();
    } finally {
      trace_return("WhileLoop");
    }
  }

  final public void ForLoop() throws ParseException {
    trace_call("ForLoop");
    try {
      if (jj_2_5(2147483647)) {
        NumericForLoop();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_FOR:{
          CursorForLoop();
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("ForLoop");
    }
  }

  final public void NumericForLoopLookahead() throws ParseException {
    trace_call("NumericForLoopLookahead");
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_REVERSE:{
        jj_consume_token(K_REVERSE);
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      PlSqlSimpleExpression();
      jj_consume_token(O_DOUBLEDOT);
    } finally {
      trace_return("NumericForLoopLookahead");
    }
  }

  final public void NumericForLoop() throws ParseException {
    trace_call("NumericForLoop");
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_REVERSE:{
        jj_consume_token(K_REVERSE);
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      PlSqlSimpleExpression();
      jj_consume_token(O_DOUBLEDOT);
      PlSqlSimpleExpression();
      NormalLoop();
    } finally {
      trace_return("NumericForLoop");
    }
  }

  final public void CursorForLoop() throws ParseException {
    trace_call("CursorForLoop");
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_IN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_OPENPAREN:{
          jj_consume_token(O_OPENPAREN);
          Arguments();
          jj_consume_token(O_CLOSEPAREN);
          break;
          }
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        break;
        }
      case O_OPENPAREN:{
        jj_consume_token(O_OPENPAREN);
        SelectStatement();
        jj_consume_token(O_CLOSEPAREN);
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      NormalLoop();
    } finally {
      trace_return("CursorForLoop");
    }
  }

  final public void NullStatement() throws ParseException {
    trace_call("NullStatement");
    try {
      jj_consume_token(K_NULL);
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("NullStatement");
    }
  }

  final public void RaiseStatement() throws ParseException {
    trace_call("RaiseStatement");
    try {
      jj_consume_token(K_RAISE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("RaiseStatement");
    }
  }

  final public void ReturnStatement() throws ParseException {
    trace_call("ReturnStatement");
    try {
      jj_consume_token(K_RETURN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_MINUS:
      case O_OPENPAREN:
      case O_PLUS:
      case K_CASE:
      case K_NOT:
      case K_NULL:
      case K_SQL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:{
        PlSqlExpression();
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("ReturnStatement");
    }
  }

  final public void CloseStatement() throws ParseException {
    trace_call("CloseStatement");
    try {
      jj_consume_token(K_CLOSE);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("CloseStatement");
    }
  }

  final public void CommitStatement() throws ParseException {
    trace_call("CommitStatement");
    try {
      jj_consume_token(K_COMMIT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WORK:{
        jj_consume_token(K_WORK);
        break;
        }
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_COMMENT:{
        jj_consume_token(K_COMMENT);
        jj_consume_token(S_CHAR_LITERAL);
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("CommitStatement");
    }
  }

  final public void FetchStatement() throws ParseException {
    trace_call("FetchStatement");
    try {
      jj_consume_token(K_FETCH);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(K_INTO);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      case S_BIND:{
        jj_consume_token(S_BIND);
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[65] = jj_gen;
          break label_9;
        }
        jj_consume_token(O_COMMA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:{
          jj_consume_token(S_IDENTIFIER);
          break;
          }
        case S_BIND:{
          jj_consume_token(S_BIND);
          break;
          }
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("FetchStatement");
    }
  }

  final public void LockTableStatement() throws ParseException {
    trace_call("LockTableStatement");
    try {
      jj_consume_token(K_LOCK);
      jj_consume_token(K_TABLE);
      TableReference();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[67] = jj_gen;
          break label_10;
        }
        jj_consume_token(O_COMMA);
        TableReference();
      }
      jj_consume_token(K_IN);
      LockMode();
      jj_consume_token(K_MODE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOWAIT:{
        jj_consume_token(K_NOWAIT);
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("LockTableStatement");
    }
  }

  final public void OpenStatement() throws ParseException {
    trace_call("OpenStatement");
    try {
      jj_consume_token(K_OPEN);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_OPENPAREN:{
        jj_consume_token(O_OPENPAREN);
        Arguments();
        jj_consume_token(O_CLOSEPAREN);
        break;
        }
      default:
        jj_la1[69] = jj_gen;
        ;
      }
      jj_consume_token(K_FOR);
      SelectStatement();
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("OpenStatement");
    }
  }

  final public void RollbackStatement() throws ParseException {
    trace_call("RollbackStatement");
    try {
      jj_consume_token(K_ROLLBACK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WORK:{
        jj_consume_token(K_WORK);
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_TO:{
        jj_consume_token(K_TO);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_SAVEPOINT:{
          jj_consume_token(K_SAVEPOINT);
          break;
          }
        default:
          jj_la1[71] = jj_gen;
          ;
        }
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_COMMENT:{
        jj_consume_token(K_COMMENT);
        jj_consume_token(S_CHAR_LITERAL);
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("RollbackStatement");
    }
  }

  final public void SetTransactionStatement() throws ParseException {
    trace_call("SetTransactionStatement");
    try {
      jj_consume_token(K_SET);
      jj_consume_token(K_TRANSACTION);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_READ:{
        jj_consume_token(K_READ);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ONLY:{
          jj_consume_token(K_ONLY);
          break;
          }
        case K_WRITE:{
          jj_consume_token(K_WRITE);
          break;
          }
        default:
          jj_la1[74] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case K_USE:{
        jj_consume_token(K_USE);
        jj_consume_token(K_ROLLBACK);
        jj_consume_token(K_SEGMENT);
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("SetTransactionStatement");
    }
  }

  final public void LockMode() throws ParseException {
    trace_call("LockMode");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ROW:{
        jj_consume_token(K_ROW);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_SHARE:{
          jj_consume_token(K_SHARE);
          break;
          }
        case K_EXCLUSIVE:{
          jj_consume_token(K_EXCLUSIVE);
          break;
          }
        default:
          jj_la1[76] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case K_SHARE:{
        jj_consume_token(K_SHARE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ROW:
        case K_UPDATE:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_UPDATE:{
            jj_consume_token(K_UPDATE);
            break;
            }
          case K_ROW:{
            jj_consume_token(K_ROW);
            jj_consume_token(K_EXCLUSIVE);
            break;
            }
          default:
            jj_la1[77] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[78] = jj_gen;
          ;
        }
        break;
        }
      case K_EXCLUSIVE:{
        jj_consume_token(K_EXCLUSIVE);
        break;
        }
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("LockMode");
    }
  }

  final public void SavepointStatement() throws ParseException {
    trace_call("SavepointStatement");
    try {
      jj_consume_token(K_SAVEPOINT);
      jj_consume_token(S_IDENTIFIER);
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("SavepointStatement");
    }
  }

  final public void UpdateStatement() throws ParseException {
    trace_call("UpdateStatement");
    try {
      jj_consume_token(K_UPDATE);
      TableReference();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      jj_consume_token(K_SET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        ColumnValues();
        break;
        }
      case O_OPENPAREN:{
        jj_consume_token(O_OPENPAREN);
        TableColumn();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case O_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[81] = jj_gen;
            break label_11;
          }
          jj_consume_token(O_COMMA);
          TableColumn();
        }
        jj_consume_token(O_CLOSEPAREN);
        jj_consume_token(O_EQUAL);
        UpdatedValue();
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHERE:{
        jj_consume_token(K_WHERE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_MINUS:
        case O_OPENPAREN:
        case O_PLUS:
        case K_CASE:
        case K_EXISTS:
        case K_NOT:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:{
          SQLExpression();
          break;
          }
        case K_CURRENT:{
          jj_consume_token(K_CURRENT);
          jj_consume_token(K_OF);
          jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("UpdateStatement");
    }
  }

  final public void ColumnValues() throws ParseException {
    trace_call("ColumnValues");
    try {
      TableColumn();
      jj_consume_token(O_EQUAL);
      UpdatedValue();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[85] = jj_gen;
          break label_12;
        }
        jj_consume_token(O_COMMA);
        TableColumn();
        jj_consume_token(O_EQUAL);
        UpdatedValue();
      }
    } finally {
      trace_return("ColumnValues");
    }
  }

  final public void UpdatedValue() throws ParseException {
    trace_call("UpdatedValue");
    try {
      if (jj_2_6(2147483647)) {
        jj_consume_token(O_OPENPAREN);
        SelectStatement();
        jj_consume_token(O_CLOSEPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_MINUS:
        case O_OPENPAREN:
        case O_PLUS:
        case K_CASE:
        case K_NOT:
        case K_NULL:
        case K_SQL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:{
          PlSqlExpression();
          break;
          }
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("UpdatedValue");
    }
  }

  final public void InsertStatement() throws ParseException {
    trace_call("InsertStatement");
    try {
      jj_consume_token(K_INSERT);
      jj_consume_token(K_INTO);
      TableReference();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_OPENPAREN:{
        jj_consume_token(O_OPENPAREN);
        TableColumn();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case O_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[87] = jj_gen;
            break label_13;
          }
          jj_consume_token(O_COMMA);
          TableColumn();
        }
        jj_consume_token(O_CLOSEPAREN);
        break;
        }
      default:
        jj_la1[88] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_VALUES:{
        jj_consume_token(K_VALUES);
        jj_consume_token(O_OPENPAREN);
        PlSqlExpressionList();
        jj_consume_token(O_CLOSEPAREN);
        break;
        }
      case K_SELECT:{
        SelectStatement();
        break;
        }
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("InsertStatement");
    }
  }

  final public void DeleteStatement() throws ParseException {
    trace_call("DeleteStatement");
    try {
      jj_consume_token(K_DELETE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_FROM:{
        jj_consume_token(K_FROM);
        break;
        }
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      TableReference();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[91] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHERE:{
        jj_consume_token(K_WHERE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_MINUS:
        case O_OPENPAREN:
        case O_PLUS:
        case K_CASE:
        case K_EXISTS:
        case K_NOT:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:{
          SQLExpression();
          break;
          }
        case K_CURRENT:{
          jj_consume_token(K_CURRENT);
          jj_consume_token(K_OF);
          jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[92] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[93] = jj_gen;
        ;
      }
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("DeleteStatement");
    }
  }

  final public void QueryStatement() throws ParseException {
    trace_call("QueryStatement");
    try {
      SelectStatement();
      jj_consume_token(O_SEMICOLON);
    } finally {
      trace_return("QueryStatement");
    }
  }

// PLSQL Expression and it's childs
  final public 
void PlSqlExpression() throws ParseException {
    trace_call("PlSqlExpression");
    try {
      PlSqlAndExpression();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_OR:{
          ;
          break;
          }
        default:
          jj_la1[94] = jj_gen;
          break label_14;
        }
        jj_consume_token(K_OR);
        PlSqlAndExpression();
      }
    } finally {
      trace_return("PlSqlExpression");
    }
  }

  final public void PlSqlAndExpression() throws ParseException {
    trace_call("PlSqlAndExpression");
    try {
      PlSqlUnaryLogicalExpression();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_AND:{
          ;
          break;
          }
        default:
          jj_la1[95] = jj_gen;
          break label_15;
        }
        jj_consume_token(K_AND);
        PlSqlUnaryLogicalExpression();
      }
    } finally {
      trace_return("PlSqlAndExpression");
    }
  }

  final public void PlSqlUnaryLogicalExpression() throws ParseException {
    trace_call("PlSqlUnaryLogicalExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[96] = jj_gen;
        ;
      }
      PlSqlRelationalExpression();
    } finally {
      trace_return("PlSqlUnaryLogicalExpression");
    }
  }

  final public void PlSqlRelationalExpression() throws ParseException {
    trace_call("PlSqlRelationalExpression");
    try {
      PlSqlSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_EQUAL:
      case O_GREATER:
      case O_GREATEREQUAL:
      case O_LESS:
      case O_LESSEQUAL:
      case O_NOTEQUAL2:
      case O_NOTEQUAL:
      case O_POUND:
      case K_BETWEEN:
      case K_IN:
      case K_IS:
      case K_LIKE:
      case K_NOT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_EQUAL:
        case O_GREATER:
        case O_GREATEREQUAL:
        case O_LESS:
        case O_LESSEQUAL:
        case O_NOTEQUAL2:
        case O_NOTEQUAL:
        case O_POUND:{
          Relop();
          PlSqlSimpleExpression();
          break;
          }
        default:
          jj_la1[97] = jj_gen;
          if (jj_2_7(2)) {
            PlSqlInClause();
          } else if (jj_2_8(2)) {
            PlSqlBetweenClause();
          } else if (jj_2_9(2)) {
            PlSqlLikeClause();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_IS:{
              IsNullClause();
              break;
              }
            default:
              jj_la1[98] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        ;
      }
    } finally {
      trace_return("PlSqlRelationalExpression");
    }
  }

  final public void PlSqlExpressionList() throws ParseException {
    trace_call("PlSqlExpressionList");
    try {
      PlSqlExpression();
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[100] = jj_gen;
          break label_16;
        }
        jj_consume_token(O_COMMA);
        PlSqlExpression();
      }
    } finally {
      trace_return("PlSqlExpressionList");
    }
  }

  final public void PlSqlInClause() throws ParseException {
    trace_call("PlSqlInClause");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[101] = jj_gen;
        ;
      }
      jj_consume_token(K_IN);
      jj_consume_token(O_OPENPAREN);
      PlSqlExpressionList();
      jj_consume_token(O_CLOSEPAREN);
    } finally {
      trace_return("PlSqlInClause");
    }
  }

  final public void PlSqlBetweenClause() throws ParseException {
    trace_call("PlSqlBetweenClause");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[102] = jj_gen;
        ;
      }
      jj_consume_token(K_BETWEEN);
      PlSqlSimpleExpression();
      jj_consume_token(K_AND);
      PlSqlSimpleExpression();
    } finally {
      trace_return("PlSqlBetweenClause");
    }
  }

  final public void PlSqlLikeClause() throws ParseException {
    trace_call("PlSqlLikeClause");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        ;
      }
      jj_consume_token(K_LIKE);
      PlSqlSimpleExpression();
    } finally {
      trace_return("PlSqlLikeClause");
    }
  }

  final public void IsNullClause() throws ParseException {
    trace_call("IsNullClause");
    try {
      jj_consume_token(K_IS);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[104] = jj_gen;
        ;
      }
      jj_consume_token(K_NULL);
    } finally {
      trace_return("IsNullClause");
    }
  }

  final public void PlSqlSimpleExpression() throws ParseException {
    trace_call("PlSqlSimpleExpression");
    try {
      PlSqlMultiplicativeExpression();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_CONCAT:
        case O_MINUS:
        case O_PLUS:{
          ;
          break;
          }
        default:
          jj_la1[105] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_PLUS:{
          jj_consume_token(O_PLUS);
          break;
          }
        case O_MINUS:{
          jj_consume_token(O_MINUS);
          break;
          }
        case O_CONCAT:{
          jj_consume_token(O_CONCAT);
          break;
          }
        default:
          jj_la1[106] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlMultiplicativeExpression();
      }
    } finally {
      trace_return("PlSqlSimpleExpression");
    }
  }

  final public void PlSqlMultiplicativeExpression() throws ParseException {
    trace_call("PlSqlMultiplicativeExpression");
    try {
      PlSqlExpotentExpression();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_ASTERISK:
        case O_SLASH:{
          ;
          break;
          }
        default:
          jj_la1[107] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_ASTERISK:{
          jj_consume_token(O_ASTERISK);
          break;
          }
        case O_SLASH:{
          jj_consume_token(O_SLASH);
          break;
          }
        default:
          jj_la1[108] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlExpotentExpression();
      }
    } finally {
      trace_return("PlSqlMultiplicativeExpression");
    }
  }

  final public void PlSqlExpotentExpression() throws ParseException {
    trace_call("PlSqlExpotentExpression");
    try {
      PlSqlUnaryExpression();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 162:{
          ;
          break;
          }
        default:
          jj_la1[109] = jj_gen;
          break label_19;
        }
        jj_consume_token(162);
        PlSqlUnaryExpression();
      }
    } finally {
      trace_return("PlSqlExpotentExpression");
    }
  }

  final public void PlSqlUnaryExpression() throws ParseException {
    trace_call("PlSqlUnaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_MINUS:
      case O_PLUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_PLUS:{
          jj_consume_token(O_PLUS);
          break;
          }
        case O_MINUS:{
          jj_consume_token(O_MINUS);
          break;
          }
        default:
          jj_la1[110] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PlSqlPrimaryExpression();
        break;
        }
      case O_OPENPAREN:
      case K_CASE:
      case K_NULL:
      case K_SQL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:{
        PlSqlPrimaryExpression();
        break;
        }
      default:
        jj_la1[111] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("PlSqlUnaryExpression");
    }
  }

  final public void PlSqlPrimaryExpression() throws ParseException {
    trace_call("PlSqlPrimaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NULL:{
        jj_consume_token(K_NULL);
        break;
        }
      default:
        jj_la1[116] = jj_gen;
        if (jj_2_10(2)) {
          jj_consume_token(S_IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 163:{
            jj_consume_token(163);
            break;
            }
          case 164:{
            jj_consume_token(164);
            break;
            }
          case 165:{
            jj_consume_token(165);
            break;
            }
          case 166:{
            jj_consume_token(166);
            break;
            }
          default:
            jj_la1[112] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else if (jj_2_11(2147483647)) {
          FunctionCall();
        } else if (jj_2_12(2)) {
          jj_consume_token(S_IDENTIFIER);
          jj_consume_token(O_OPENPAREN);
          Arguments();
          jj_consume_token(O_CLOSEPAREN);
        } else if (jj_2_13(4)) {
          jj_consume_token(S_IDENTIFIER);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case O_DOT:{
            jj_consume_token(O_DOT);
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[113] = jj_gen;
            ;
          }
          jj_consume_token(O_OPENPAREN);
          Arguments();
          jj_consume_token(O_CLOSEPAREN);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:{
            jj_consume_token(S_IDENTIFIER);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case O_DOT:{
              jj_consume_token(O_DOT);
              jj_consume_token(S_IDENTIFIER);
              break;
              }
            default:
              jj_la1[114] = jj_gen;
              ;
            }
            break;
            }
          case K_SQL:{
            jj_consume_token(K_SQL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 163:{
              jj_consume_token(163);
              break;
              }
            case 164:{
              jj_consume_token(164);
              break;
              }
            case 165:{
              jj_consume_token(165);
              break;
              }
            case 166:{
              jj_consume_token(166);
              break;
              }
            default:
              jj_la1[115] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          case S_NUMBER:{
            jj_consume_token(S_NUMBER);
            break;
            }
          case S_CHAR_LITERAL:{
            jj_consume_token(S_CHAR_LITERAL);
            break;
            }
          case S_BIND:{
            jj_consume_token(S_BIND);
            break;
            }
          case K_CASE:{
            Case();
            break;
            }
          case O_OPENPAREN:{
            jj_consume_token(O_OPENPAREN);
            PlSqlExpression();
            jj_consume_token(O_CLOSEPAREN);
            break;
            }
          default:
            jj_la1[117] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("PlSqlPrimaryExpression");
    }
  }

/* ----------------------- PLSQL Code Block Ends here -------------- */

/* ---------------- General Productions --------------------- */
  final public 
void TableColumn() throws ParseException {
    trace_call("TableColumn");
    try {
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_DOT:{
        jj_consume_token(O_DOT);
        OracleObjectName();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_DOT:{
          jj_consume_token(O_DOT);
          OracleObjectName();
          break;
          }
        default:
          jj_la1[118] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[119] = jj_gen;
        ;
      }
    } finally {
      trace_return("TableColumn");
    }
  }

  final public void OracleObjectName() throws ParseException {
    trace_call("OracleObjectName");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      case S_QUOTED_IDENTIFIER:{
        jj_consume_token(S_QUOTED_IDENTIFIER);
        break;
        }
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("OracleObjectName");
    }
  }

  final public void Relop() throws ParseException {
    trace_call("Relop");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_EQUAL:{
        jj_consume_token(O_EQUAL);
        break;
        }
      case O_NOTEQUAL:{
        jj_consume_token(O_NOTEQUAL);
        break;
        }
      case O_POUND:{
        jj_consume_token(O_POUND);
        break;
        }
      case O_NOTEQUAL2:{
        jj_consume_token(O_NOTEQUAL2);
        break;
        }
      case O_GREATER:{
        jj_consume_token(O_GREATER);
        break;
        }
      case O_GREATEREQUAL:{
        jj_consume_token(O_GREATEREQUAL);
        break;
        }
      case O_LESS:{
        jj_consume_token(O_LESS);
        break;
        }
      case O_LESSEQUAL:{
        jj_consume_token(O_LESSEQUAL);
        break;
        }
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("Relop");
    }
  }

  final public void TableReference() throws ParseException {
    trace_call("TableReference");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        OracleObjectName();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_DOT:{
          jj_consume_token(O_DOT);
          OracleObjectName();
          break;
          }
        default:
          jj_la1[122] = jj_gen;
          ;
        }
        break;
        }
      case K_TABLE:{
        jj_consume_token(K_TABLE);
        jj_consume_token(O_OPENPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_CAST:{
          jj_consume_token(K_CAST);
          jj_consume_token(O_OPENPAREN);
          jj_consume_token(S_IDENTIFIER);
          jj_consume_token(K_AS);
          jj_consume_token(S_IDENTIFIER);
          jj_consume_token(O_CLOSEPAREN);
          break;
          }
        case S_IDENTIFIER:{
          jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[123] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(O_CLOSEPAREN);
        break;
        }
      default:
        jj_la1[124] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("TableReference");
    }
  }

  final public void ParameterList() throws ParseException {
    trace_call("ParameterList");
    try {
      Parameter();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[125] = jj_gen;
          break label_20;
        }
        jj_consume_token(O_COMMA);
        Parameter();
      }
    } finally {
      trace_return("ParameterList");
    }
  }

  final public void NumOrID() throws ParseException {
    trace_call("NumOrID");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      case O_MINUS:
      case O_PLUS:
      case S_NUMBER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_MINUS:
        case O_PLUS:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case O_PLUS:{
            jj_consume_token(O_PLUS);
            break;
            }
          case O_MINUS:{
            jj_consume_token(O_MINUS);
            break;
            }
          default:
            jj_la1[126] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[127] = jj_gen;
          ;
        }
        jj_consume_token(S_NUMBER);
        break;
        }
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("NumOrID");
    }
  }

  final public void Parameter() throws ParseException {
    trace_call("Parameter");
    try {
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_BINARY_INTEGER:
      case K_BOOLEAN:
      case K_CHAR:
      case K_DATE:
      case K_FLOAT:
      case K_IN:
      case K_INTEGER:
      case K_NATURAL:
      case K_NUMBER:
      case K_OUT:
      case K_REAL:
      case K_VARCHAR2:
      case K_VARCHAR:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_IN:{
          jj_consume_token(K_IN);
          break;
          }
        default:
          jj_la1[129] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_OUT:{
          jj_consume_token(K_OUT);
          break;
          }
        default:
          jj_la1[130] = jj_gen;
          ;
        }
        TypeDeclaration();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_ASSIGN:
        case K_DEFAULT:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case O_ASSIGN:{
            jj_consume_token(O_ASSIGN);
            break;
            }
          case K_DEFAULT:{
            jj_consume_token(K_DEFAULT);
            break;
            }
          default:
            jj_la1[131] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          PlSqlExpression();
          break;
          }
        default:
          jj_la1[132] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[133] = jj_gen;
        ;
      }
    } finally {
      trace_return("Parameter");
    }
  }

// Just a synonym for PlSqlExpressionList for better readability
  final public void Arguments() throws ParseException {
    trace_call("Arguments");
    try {
      PlSqlExpressionList();
    } finally {
      trace_return("Arguments");
    }
  }

/* --------------- General Productions ends here --------------- */

/* ----------- SQL productions start here ----------------- */
  final public 
void SelectStatement() throws ParseException {
    trace_call("SelectStatement");
    try {
      SelectWithoutOrder();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ORDER:{
        OrderByClause();
        break;
        }
      default:
        jj_la1[134] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_FOR:{
        ForUpdateClause();
        break;
        }
      default:
        jj_la1[135] = jj_gen;
        ;
      }
    } finally {
      trace_return("SelectStatement");
    }
  }

  final public void SelectWithoutOrder() throws ParseException {
    trace_call("SelectWithoutOrder");
    try {
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ALL:{
          jj_consume_token(K_ALL);
          break;
          }
        case K_DISTINCT:{
          jj_consume_token(K_DISTINCT);
          break;
          }
        default:
          jj_la1[136] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[137] = jj_gen;
        ;
      }
      SelectList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_INTO:{
        IntoClause();
        break;
        }
      default:
        jj_la1[138] = jj_gen;
        ;
      }
      FromClause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_WHERE:{
        WhereClause();
        break;
        }
      default:
        jj_la1[139] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_CONNECT:
      case K_START:{
        ConnectClause();
        break;
        }
      default:
        jj_la1[140] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_GROUP:{
        GroupByClause();
        break;
        }
      default:
        jj_la1[141] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_INTERSECT:
      case K_MINUS:
      case K_UNION:{
        SetClause();
        break;
        }
      default:
        jj_la1[142] = jj_gen;
        ;
      }
    } finally {
      trace_return("SelectWithoutOrder");
    }
  }

/* Checks for whatever follows  SELECT */
  final public void SelectList() throws ParseException {
    trace_call("SelectList");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_ASTERISK:{
        jj_consume_token(O_ASTERISK);
        break;
        }
      case O_MINUS:
      case O_OPENPAREN:
      case O_PLUS:
      case K_CASE:
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:{
        SelectItem();
        label_21:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case O_COMMA:{
            ;
            break;
            }
          default:
            jj_la1[143] = jj_gen;
            break label_21;
          }
          jj_consume_token(O_COMMA);
          SelectItem();
        }
        break;
        }
      default:
        jj_la1[144] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("SelectList");
    }
  }

  final public void SelectItem() throws ParseException {
    trace_call("SelectItem");
    try {
      if (jj_2_14(2)) {
        OracleObjectName();
        jj_consume_token(167);
      } else if (jj_2_15(4)) {
        OracleObjectName();
        jj_consume_token(O_DOT);
        OracleObjectName();
        jj_consume_token(167);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_MINUS:
        case O_OPENPAREN:
        case O_PLUS:
        case K_CASE:
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:{
          SQLSimpleExpression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:{
            jj_consume_token(S_IDENTIFIER);
            break;
            }
          default:
            jj_la1[145] = jj_gen;
            ;
          }
          break;
          }
        default:
          jj_la1[146] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("SelectItem");
    }
  }

  final public void IntoClause() throws ParseException {
    trace_call("IntoClause");
    try {
      jj_consume_token(K_INTO);
      IntoItem();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[147] = jj_gen;
          break label_22;
        }
        jj_consume_token(O_COMMA);
        IntoItem();
      }
    } finally {
      trace_return("IntoClause");
    }
  }

  final public void IntoItem() throws ParseException {
    trace_call("IntoItem");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_DOT:{
          jj_consume_token(O_DOT);
          jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[148] = jj_gen;
          ;
        }
        break;
        }
      case S_BIND:{
        jj_consume_token(S_BIND);
        break;
        }
      default:
        jj_la1[149] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("IntoItem");
    }
  }

  final public void FromClause() throws ParseException {
    trace_call("FromClause");
    try {
      jj_consume_token(K_FROM);
      FromItem();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[150] = jj_gen;
          break label_23;
        }
        jj_consume_token(O_COMMA);
        FromItem();
      }
    } finally {
      trace_return("FromClause");
    }
  }

  final public void FromItem() throws ParseException {
    trace_call("FromItem");
    try {
      TableReference();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case S_IDENTIFIER:{
        jj_consume_token(S_IDENTIFIER);
        break;
        }
      default:
        jj_la1[151] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_JOIN:{
        jj_consume_token(K_JOIN);
        TableReference();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case S_IDENTIFIER:{
          jj_consume_token(S_IDENTIFIER);
          break;
          }
        default:
          jj_la1[152] = jj_gen;
          ;
        }
        jj_consume_token(K_ON);
        SQLExpression();
        break;
        }
      default:
        jj_la1[153] = jj_gen;
        ;
      }
    } finally {
      trace_return("FromItem");
    }
  }

  final public void WhereClause() throws ParseException {
    trace_call("WhereClause");
    try {
      jj_consume_token(K_WHERE);
      SQLExpression();
    } finally {
      trace_return("WhereClause");
    }
  }

  final public void ConnectClause() throws ParseException {
    trace_call("ConnectClause");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_START:{
        jj_consume_token(K_START);
        jj_consume_token(K_WITH);
        SQLExpression();
        break;
        }
      default:
        jj_la1[154] = jj_gen;
        ;
      }
      jj_consume_token(K_CONNECT);
      jj_consume_token(K_BY);
      SQLExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_START:{
        jj_consume_token(K_START);
        jj_consume_token(K_WITH);
        SQLExpression();
        break;
        }
      default:
        jj_la1[155] = jj_gen;
        ;
      }
    } finally {
      trace_return("ConnectClause");
    }
  }

  final public void GroupByClause() throws ParseException {
    trace_call("GroupByClause");
    try {
      jj_consume_token(K_GROUP);
      jj_consume_token(K_BY);
      SQLExpressionList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_HAVING:{
        jj_consume_token(K_HAVING);
        SQLExpression();
        break;
        }
      default:
        jj_la1[156] = jj_gen;
        ;
      }
    } finally {
      trace_return("GroupByClause");
    }
  }

  final public void SetClause() throws ParseException {
    trace_call("SetClause");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_UNION:{
        jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ALL:{
          jj_consume_token(K_ALL);
          break;
          }
        default:
          jj_la1[157] = jj_gen;
          ;
        }
        break;
        }
      case K_INTERSECT:{
        jj_consume_token(K_INTERSECT);
        break;
        }
      case K_MINUS:{
        jj_consume_token(K_MINUS);
        break;
        }
      default:
        jj_la1[158] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_16(2147483647)) {
        jj_consume_token(O_OPENPAREN);
        SelectWithoutOrder();
        jj_consume_token(O_CLOSEPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_SELECT:{
          SelectWithoutOrder();
          break;
          }
        default:
          jj_la1[159] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("SetClause");
    }
  }

  final public void OrderByClause() throws ParseException {
    trace_call("OrderByClause");
    try {
      jj_consume_token(K_ORDER);
      jj_consume_token(K_BY);
      SQLSimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ASC:
      case K_DESC:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ASC:{
          jj_consume_token(K_ASC);
          break;
          }
        case K_DESC:{
          jj_consume_token(K_DESC);
          break;
          }
        default:
          jj_la1[160] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[161] = jj_gen;
        ;
      }
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[162] = jj_gen;
          break label_24;
        }
        jj_consume_token(O_COMMA);
        SQLSimpleExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ASC:
        case K_DESC:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_ASC:{
            jj_consume_token(K_ASC);
            break;
            }
          case K_DESC:{
            jj_consume_token(K_DESC);
            break;
            }
          default:
            jj_la1[163] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[164] = jj_gen;
          ;
        }
      }
    } finally {
      trace_return("OrderByClause");
    }
  }

  final public void ForUpdateClause() throws ParseException {
    trace_call("ForUpdateClause");
    try {
      jj_consume_token(K_FOR);
      jj_consume_token(K_UPDATE);
      jj_consume_token(K_OF);
      TableColumn();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[165] = jj_gen;
          break label_25;
        }
        jj_consume_token(O_COMMA);
        TableColumn();
      }
    } finally {
      trace_return("ForUpdateClause");
    }
  }

  final public void SQLExpression() throws ParseException {
    trace_call("SQLExpression");
    try {
      SQLAndExpression();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_OR:{
          ;
          break;
          }
        default:
          jj_la1[166] = jj_gen;
          break label_26;
        }
        jj_consume_token(K_OR);
        SQLAndExpression();
      }
    } finally {
      trace_return("SQLExpression");
    }
  }

  final public void SQLAndExpression() throws ParseException {
    trace_call("SQLAndExpression");
    try {
      SQLUnaryLogicalExpression();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_AND:{
          ;
          break;
          }
        default:
          jj_la1[167] = jj_gen;
          break label_27;
        }
        jj_consume_token(K_AND);
        SQLUnaryLogicalExpression();
      }
    } finally {
      trace_return("SQLAndExpression");
    }
  }

  final public void SQLUnaryLogicalExpression() throws ParseException {
    trace_call("SQLUnaryLogicalExpression");
    try {
      if (jj_2_17(2)) {
        ExistsClause();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_MINUS:
        case O_OPENPAREN:
        case O_PLUS:
        case K_CASE:
        case K_NOT:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_NOT:{
            jj_consume_token(K_NOT);
            break;
            }
          default:
            jj_la1[168] = jj_gen;
            ;
          }
          SQLRelationalExpression();
          break;
          }
        default:
          jj_la1[169] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("SQLUnaryLogicalExpression");
    }
  }

  final public void ExistsClause() throws ParseException {
    trace_call("ExistsClause");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[170] = jj_gen;
        ;
      }
      jj_consume_token(K_EXISTS);
      jj_consume_token(O_OPENPAREN);
      SubQuery();
      jj_consume_token(O_CLOSEPAREN);
    } finally {
      trace_return("ExistsClause");
    }
  }

  final public void SQLRelationalExpression() throws ParseException {
    trace_call("SQLRelationalExpression");
    try {
      if (jj_2_18(2147483647)) {
        jj_consume_token(O_OPENPAREN);
        SQLExpressionList();
        jj_consume_token(O_CLOSEPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_MINUS:
        case O_OPENPAREN:
        case O_PLUS:
        case K_CASE:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_PRIOR:{
            jj_consume_token(K_PRIOR);
            break;
            }
          default:
            jj_la1[171] = jj_gen;
            ;
          }
          SQLSimpleExpression();
          break;
          }
        default:
          jj_la1[172] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_EQUAL:
      case O_GREATER:
      case O_GREATEREQUAL:
      case O_LESS:
      case O_LESSEQUAL:
      case O_NOTEQUAL2:
      case O_NOTEQUAL:
      case O_POUND:
      case K_BETWEEN:
      case K_IN:
      case K_IS:
      case K_LIKE:
      case K_NOT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_EQUAL:
        case O_GREATER:
        case O_GREATEREQUAL:
        case O_LESS:
        case O_LESSEQUAL:
        case O_NOTEQUAL2:
        case O_NOTEQUAL:
        case O_POUND:{
          SQLRelationalOperatorExpression();
          break;
          }
        default:
          jj_la1[173] = jj_gen;
          if (jj_2_19(2)) {
            SQLInClause();
          } else if (jj_2_20(2)) {
            SQLBetweenClause();
          } else if (jj_2_21(2)) {
            SQLLikeClause();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case K_IS:{
              IsNullClause();
              break;
              }
            default:
              jj_la1[174] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
        }
      default:
        jj_la1[175] = jj_gen;
        ;
      }
    } finally {
      trace_return("SQLRelationalExpression");
    }
  }

  final public void SQLExpressionList() throws ParseException {
    trace_call("SQLExpressionList");
    try {
      SQLSimpleExpression();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_COMMA:{
          ;
          break;
          }
        default:
          jj_la1[176] = jj_gen;
          break label_28;
        }
        jj_consume_token(O_COMMA);
        SQLSimpleExpression();
      }
    } finally {
      trace_return("SQLExpressionList");
    }
  }

  final public void SQLRelationalOperatorExpression() throws ParseException {
    trace_call("SQLRelationalOperatorExpression");
    try {
      Relop();
      if (jj_2_22(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_ALL:
        case K_ANY:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_ALL:{
            jj_consume_token(K_ALL);
            break;
            }
          case K_ANY:{
            jj_consume_token(K_ANY);
            break;
            }
          default:
            jj_la1[177] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[178] = jj_gen;
          ;
        }
        jj_consume_token(O_OPENPAREN);
        SubQuery();
        jj_consume_token(O_CLOSEPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_MINUS:
        case O_OPENPAREN:
        case O_PLUS:
        case K_CASE:
        case K_NULL:
        case K_PRIOR:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case K_PRIOR:{
            jj_consume_token(K_PRIOR);
            break;
            }
          default:
            jj_la1[179] = jj_gen;
            ;
          }
          SQLSimpleExpression();
          break;
          }
        default:
          jj_la1[180] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
      trace_return("SQLRelationalOperatorExpression");
    }
  }

  final public void SQLInClause() throws ParseException {
    trace_call("SQLInClause");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[181] = jj_gen;
        ;
      }
      jj_consume_token(K_IN);
      jj_consume_token(O_OPENPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_MINUS:
      case O_OPENPAREN:
      case O_PLUS:
      case K_CASE:
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:{
        SQLExpressionList();
        break;
        }
      case K_SELECT:{
        SubQuery();
        break;
        }
      default:
        jj_la1[182] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(O_CLOSEPAREN);
    } finally {
      trace_return("SQLInClause");
    }
  }

  final public void SQLBetweenClause() throws ParseException {
    trace_call("SQLBetweenClause");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[183] = jj_gen;
        ;
      }
      jj_consume_token(K_BETWEEN);
      SQLSimpleExpression();
      jj_consume_token(K_AND);
      SQLSimpleExpression();
    } finally {
      trace_return("SQLBetweenClause");
    }
  }

  final public void SQLLikeClause() throws ParseException {
    trace_call("SQLLikeClause");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NOT:{
        jj_consume_token(K_NOT);
        break;
        }
      default:
        jj_la1[184] = jj_gen;
        ;
      }
      jj_consume_token(K_LIKE);
      SQLSimpleExpression();
    } finally {
      trace_return("SQLLikeClause");
    }
  }

  final public void SQLSimpleExpression() throws ParseException {
    trace_call("SQLSimpleExpression");
    try {
      SQLMultiplicativeExpression();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_CONCAT:
        case O_MINUS:
        case O_PLUS:{
          ;
          break;
          }
        default:
          jj_la1[185] = jj_gen;
          break label_29;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_PLUS:{
          jj_consume_token(O_PLUS);
          break;
          }
        case O_MINUS:{
          jj_consume_token(O_MINUS);
          break;
          }
        case O_CONCAT:{
          jj_consume_token(O_CONCAT);
          break;
          }
        default:
          jj_la1[186] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        SQLMultiplicativeExpression();
      }
    } finally {
      trace_return("SQLSimpleExpression");
    }
  }

  final public void SQLMultiplicativeExpression() throws ParseException {
    trace_call("SQLMultiplicativeExpression");
    try {
      SQLExpotentExpression();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_ASTERISK:
        case O_SLASH:{
          ;
          break;
          }
        default:
          jj_la1[187] = jj_gen;
          break label_30;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_ASTERISK:{
          jj_consume_token(O_ASTERISK);
          break;
          }
        case O_SLASH:{
          jj_consume_token(O_SLASH);
          break;
          }
        default:
          jj_la1[188] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        SQLExpotentExpression();
      }
    } finally {
      trace_return("SQLMultiplicativeExpression");
    }
  }

  final public void SQLExpotentExpression() throws ParseException {
    trace_call("SQLExpotentExpression");
    try {
      SQLUnaryExpression();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 162:{
          ;
          break;
          }
        default:
          jj_la1[189] = jj_gen;
          break label_31;
        }
        jj_consume_token(162);
        SQLUnaryExpression();
      }
    } finally {
      trace_return("SQLExpotentExpression");
    }
  }

  final public void SQLUnaryExpression() throws ParseException {
    trace_call("SQLUnaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_MINUS:
      case O_PLUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_PLUS:{
          jj_consume_token(O_PLUS);
          break;
          }
        case O_MINUS:{
          jj_consume_token(O_MINUS);
          break;
          }
        default:
          jj_la1[190] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[191] = jj_gen;
        ;
      }
      SQLPrimaryExpression();
    } finally {
      trace_return("SQLUnaryExpression");
    }
  }

  final public void SQLPrimaryExpression() throws ParseException {
    trace_call("SQLPrimaryExpression");
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_NULL:{
        jj_consume_token(K_NULL);
        break;
        }
      default:
        jj_la1[192] = jj_gen;
        if (jj_2_23(2147483647)) {
          FunctionCall();
        } else if (jj_2_24(2147483647)) {
          OuterJoinExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case S_IDENTIFIER:
          case S_QUOTED_IDENTIFIER:{
            TableColumn();
            break;
            }
          case S_NUMBER:{
            jj_consume_token(S_NUMBER);
            break;
            }
          case S_CHAR_LITERAL:{
            jj_consume_token(S_CHAR_LITERAL);
            break;
            }
          case S_BIND:{
            jj_consume_token(S_BIND);
            break;
            }
          case K_CASE:{
            Case();
            break;
            }
          case O_OPENPAREN:{
            jj_consume_token(O_OPENPAREN);
            SQLExpression();
            jj_consume_token(O_CLOSEPAREN);
            break;
            }
          default:
            jj_la1[193] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } finally {
      trace_return("SQLPrimaryExpression");
    }
  }

  final public void Case() throws ParseException {
    trace_call("Case");
    try {
      jj_consume_token(K_CASE);
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_WHEN:{
          ;
          break;
          }
        default:
          jj_la1[194] = jj_gen;
          break label_32;
        }
        jj_consume_token(K_WHEN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_EXISTS:{
          jj_consume_token(K_EXISTS);
          jj_consume_token(O_OPENPAREN);
          SelectStatement();
          jj_consume_token(O_CLOSEPAREN);
          break;
          }
        case O_MINUS:
        case O_OPENPAREN:
        case O_PLUS:
        case K_CASE:
        case K_NOT:
        case K_NULL:
        case K_SQL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:{
          PlSqlExpression();
          break;
          }
        default:
          jj_la1[195] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(K_THEN);
        PlSqlExpression();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ELSE:{
        jj_consume_token(K_ELSE);
        PlSqlExpression();
        break;
        }
      default:
        jj_la1[196] = jj_gen;
        ;
      }
      jj_consume_token(K_END);
    } finally {
      trace_return("Case");
    }
  }

  final public void FunctionCall() throws ParseException {
    trace_call("FunctionCall");
    try {
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_DOT:{
        jj_consume_token(O_DOT);
        OracleObjectName();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_DOT:{
          jj_consume_token(O_DOT);
          OracleObjectName();
          break;
          }
        default:
          jj_la1[197] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[198] = jj_gen;
        ;
      }
      jj_consume_token(O_OPENPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case K_DISTINCT:{
          jj_consume_token(K_DISTINCT);
          break;
          }
        case K_ALL:{
          jj_consume_token(K_ALL);
          break;
          }
        default:
          jj_la1[199] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[200] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_ASTERISK:
      case O_MINUS:
      case O_OPENPAREN:
      case O_PLUS:
      case K_CASE:
      case K_NULL:
      case S_NUMBER:
      case S_IDENTIFIER:
      case S_BIND:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_MINUS:
        case O_OPENPAREN:
        case O_PLUS:
        case K_CASE:
        case K_NULL:
        case S_NUMBER:
        case S_IDENTIFIER:
        case S_BIND:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:{
          SQLArguments();
          break;
          }
        case O_ASTERISK:{
          jj_consume_token(O_ASTERISK);
          break;
          }
        default:
          jj_la1[201] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[202] = jj_gen;
        ;
      }
      jj_consume_token(O_CLOSEPAREN);
    } finally {
      trace_return("FunctionCall");
    }
  }

  final public void SQLArguments() throws ParseException {
    trace_call("SQLArguments");
    try {
      SQLExpressionList();
    } finally {
      trace_return("SQLArguments");
    }
  }

  final public void OuterJoinExpression() throws ParseException {
    trace_call("OuterJoinExpression");
    try {
      OracleObjectName();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case O_DOT:{
        jj_consume_token(O_DOT);
        OracleObjectName();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case O_DOT:{
          jj_consume_token(O_DOT);
          OracleObjectName();
          break;
          }
        default:
          jj_la1[203] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[204] = jj_gen;
        ;
      }
      jj_consume_token(O_OPENPAREN);
      jj_consume_token(O_PLUS);
      jj_consume_token(O_CLOSEPAREN);
    } finally {
      trace_return("OuterJoinExpression");
    }
  }

  final public void SubQuery() throws ParseException {
    trace_call("SubQuery");
    try {
      SelectWithoutOrder();
    } finally {
      trace_return("SubQuery");
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_3R_157()
 {
    if (!jj_rescan) trace_call("UpdateStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_UPDATE)) { if (!jj_rescan) trace_return("UpdateStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_166()) { if (!jj_rescan) trace_return("UpdateStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("UpdateStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_154()
 {
    if (!jj_rescan) trace_call("SavepointStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_SAVEPOINT)) { if (!jj_rescan) trace_return("SavepointStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("SavepointStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("SavepointStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_167()
 {
    if (jj_scan_token(K_TO)) return true;
    return false;
  }

  private boolean jj_3R_156()
 {
    if (!jj_rescan) trace_call("SetTransactionStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_SET)) { if (!jj_rescan) trace_return("SetTransactionStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_TRANSACTION)) { if (!jj_rescan) trace_return("SetTransactionStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("SetTransactionStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_168()
 {
    if (jj_scan_token(K_COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (!jj_rescan) trace_call("RollbackStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_ROLLBACK)) { if (!jj_rescan) trace_return("RollbackStatement(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) jj_scanpos = xsp;
    if (jj_scan_token(O_SEMICOLON)) { if (!jj_rescan) trace_return("RollbackStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("RollbackStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_152()
 {
    if (!jj_rescan) trace_call("OpenStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_OPEN)) { if (!jj_rescan) trace_return("OpenStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("OpenStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("OpenStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_165()
 {
    if (jj_scan_token(K_COMMENT)) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (!jj_rescan) trace_call("LockTableStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_LOCK)) { if (!jj_rescan) trace_return("LockTableStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_TABLE)) { if (!jj_rescan) trace_return("LockTableStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("LockTableStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_149()
 {
    if (!jj_rescan) trace_call("FetchStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_FETCH)) { if (!jj_rescan) trace_return("FetchStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("FetchStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("FetchStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_147()
 {
    if (!jj_rescan) trace_call("CommitStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_COMMIT)) { if (!jj_rescan) trace_return("CommitStatement(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) jj_scanpos = xsp;
    if (jj_scan_token(O_SEMICOLON)) { if (!jj_rescan) trace_return("CommitStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("CommitStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_118()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (!jj_rescan) trace_call("CloseStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_CLOSE)) { if (!jj_rescan) trace_return("CloseStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("CloseStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("CloseStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_100()
 {
    if (!jj_rescan) trace_call("ReturnStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_RETURN)) { if (!jj_rescan) trace_return("ReturnStatement(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    if (jj_scan_token(O_SEMICOLON)) { if (!jj_rescan) trace_return("ReturnStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ReturnStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_99()
 {
    if (!jj_rescan) trace_call("RaiseStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_RAISE)) { if (!jj_rescan) trace_return("RaiseStatement(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(O_SEMICOLON)) { if (!jj_rescan) trace_return("RaiseStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("RaiseStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_98()
 {
    if (!jj_rescan) trace_call("NullStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_NULL)) { if (!jj_rescan) trace_return("NullStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(O_SEMICOLON)) { if (!jj_rescan) trace_return("NullStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("NullStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_183()
 {
    if (!jj_rescan) trace_call("CursorForLoop(LOOKING AHEAD...)");
    if (jj_scan_token(K_FOR)) { if (!jj_rescan) trace_return("CursorForLoop(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("CursorForLoop(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("CursorForLoop(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_182()
 {
    if (!jj_rescan) trace_call("NumericForLoop(LOOKING AHEAD...)");
    if (jj_scan_token(K_FOR)) { if (!jj_rescan) trace_return("NumericForLoop(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("NumericForLoop(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("NumericForLoop(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_5()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (!jj_rescan) trace_call("NumericForLoopLookahead(LOOKING AHEAD...)");
    if (jj_scan_token(K_FOR)) { if (!jj_rescan) trace_return("NumericForLoopLookahead(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("NumericForLoopLookahead(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_IN)) { if (!jj_rescan) trace_return("NumericForLoopLookahead(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    if (jj_3R_55()) { if (!jj_rescan) trace_return("NumericForLoopLookahead(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(O_DOUBLEDOT)) { if (!jj_rescan) trace_return("NumericForLoopLookahead(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("NumericForLoopLookahead(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_164()
 {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (!jj_rescan) trace_call("ForLoop(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) { if (!jj_rescan) trace_return("ForLoop(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("ForLoop(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_163()
 {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (!jj_rescan) trace_call("WhileLoop(LOOKING AHEAD...)");
    if (jj_scan_token(K_WHILE)) { if (!jj_rescan) trace_return("WhileLoop(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_69()) { if (!jj_rescan) trace_return("WhileLoop(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("WhileLoop(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_143()
 {
    if (!jj_rescan) trace_call("NormalLoop(LOOKING AHEAD...)");
    if (jj_scan_token(K_LOOP)) { if (!jj_rescan) trace_return("NormalLoop(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_33()) { if (!jj_rescan) trace_return("NormalLoop(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("NormalLoop(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_scan_token(O_OPENPAREN)) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (!jj_rescan) trace_call("LoopStatement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) { if (!jj_rescan) trace_return("LoopStatement(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("LoopStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(K_WHEN)) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (!jj_rescan) trace_call("IfStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_IF)) { if (!jj_rescan) trace_return("IfStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_69()) { if (!jj_rescan) trace_return("IfStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("IfStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(O_DOT)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (!jj_rescan) trace_call("GotoStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_GOTO)) { if (!jj_rescan) trace_return("GotoStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("GotoStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("GotoStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_94()
 {
    if (!jj_rescan) trace_call("ExitStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_EXIT)) { if (!jj_rescan) trace_return("ExitStatement(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    if (jj_scan_token(O_SEMICOLON)) { if (!jj_rescan) trace_return("ExitStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ExitStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(S_BIND)) return true;
    if (jj_scan_token(O_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    if (jj_scan_token(O_ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (!jj_rescan) trace_call("AssignmentStatement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) { if (!jj_rescan) trace_return("AssignmentStatement(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("AssignmentStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (!jj_rescan) trace_call("SubroutineCall(LOOKING AHEAD...)");
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("SubroutineCall(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_scan_token(O_SEMICOLON)) { if (!jj_rescan) trace_return("SubroutineCall(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("SubroutineCall(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_130()
 {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_216()
 {
    if (!jj_rescan) trace_call("SubQuery(LOOKING AHEAD...)");
    if (jj_3R_186()) { if (!jj_rescan) trace_return("SubQuery(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("SubQuery(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_127()
 {
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (!jj_rescan) trace_call("OuterJoinExpression(LOOKING AHEAD...)");
    if (jj_3R_43()) { if (!jj_rescan) trace_return("OuterJoinExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    if (jj_scan_token(O_OPENPAREN)) { if (!jj_rescan) trace_return("OuterJoinExpression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(O_PLUS)) { if (!jj_rescan) trace_return("OuterJoinExpression(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(O_CLOSEPAREN)) { if (!jj_rescan) trace_return("OuterJoinExpression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("OuterJoinExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_124()
 {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (!jj_rescan) trace_call("SQLArguments(LOOKING AHEAD...)");
    if (jj_3R_107()) { if (!jj_rescan) trace_return("SQLArguments(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("SQLArguments(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (!jj_rescan) trace_call("SQLStatement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) {
    jj_scanpos = xsp;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) { if (!jj_rescan) trace_return("SQLStatement(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("SQLStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_58()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_scan_token(6)) return true;
    }
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    return false;
  }

  private boolean jj_3R_102()
 {
    if (!jj_rescan) trace_call("LabelDeclaration(LOOKING AHEAD...)");
    if (jj_scan_token(160)) { if (!jj_rescan) trace_return("LabelDeclaration(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("LabelDeclaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("LabelDeclaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_40()
 {
    if (!jj_rescan) trace_call("FunctionCall(LOOKING AHEAD...)");
    if (jj_3R_43()) { if (!jj_rescan) trace_return("FunctionCall(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_scan_token(O_OPENPAREN)) { if (!jj_rescan) trace_return("FunctionCall(LOOKAHEAD FAILED)"); return true; }
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    if (jj_scan_token(O_CLOSEPAREN)) { if (!jj_rescan) trace_return("FunctionCall(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("FunctionCall(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_103()
 {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_179()
 {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_194()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_193()
 {
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_3R_169()) return true;
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_scan_token(K_WHEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) return true;
    }
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (!jj_rescan) trace_call("Case(LOOKING AHEAD...)");
    if (jj_scan_token(K_CASE)) { if (!jj_rescan) trace_return("Case(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_178()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    if (jj_scan_token(K_END)) { if (!jj_rescan) trace_return("Case(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Case(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_75()
 {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (!jj_rescan) trace_call("PLSQLStatement(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) { if (!jj_rescan) trace_return("PLSQLStatement(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("PLSQLStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_74()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(162)) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_3R_162()) return true;
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    }
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (!jj_rescan) trace_call("SQLPrimaryExpression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) { if (!jj_rescan) trace_return("SQLPrimaryExpression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("SQLPrimaryExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_249()
 {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (!jj_rescan) trace_call("SQLUnaryExpression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_3R_111()) { if (!jj_rescan) trace_return("SQLUnaryExpression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("SQLUnaryExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (!jj_rescan) trace_call("SequenceOfStatements(LOOKING AHEAD...)");
    Token xsp;
    if (jj_3R_51()) { if (!jj_rescan) trace_return("SequenceOfStatements(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("SequenceOfStatements(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_71()
 {
    if (!jj_rescan) trace_call("SQLExpotentExpression(LOOKING AHEAD...)");
    if (jj_3R_91()) { if (!jj_rescan) trace_return("SQLExpotentExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_92()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("SQLExpotentExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_60()
 {
    if (!jj_rescan) trace_call("SQLMultiplicativeExpression(LOOKING AHEAD...)");
    if (jj_3R_71()) { if (!jj_rescan) trace_return("SQLMultiplicativeExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("SQLMultiplicativeExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_104()
 {
    if (!jj_rescan) trace_call("BeginEndBlock(LOOKING AHEAD...)");
    if (jj_scan_token(K_BEGIN)) { if (!jj_rescan) trace_return("BeginEndBlock(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_33()) { if (!jj_rescan) trace_return("BeginEndBlock(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("BeginEndBlock(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (!jj_rescan) trace_call("SQLSimpleExpression(LOOKING AHEAD...)");
    if (jj_3R_60()) { if (!jj_rescan) trace_return("SQLSimpleExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_61()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("SQLSimpleExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_248()
 {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (!jj_rescan) trace_call("SQLLikeClause(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) { if (!jj_rescan) trace_return("SQLLikeClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_45()) { if (!jj_rescan) trace_return("SQLLikeClause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("SQLLikeClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_19()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (!jj_rescan) trace_call("SQLBetweenClause(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) { if (!jj_rescan) trace_return("SQLBetweenClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_45()) { if (!jj_rescan) trace_return("SQLBetweenClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_AND)) { if (!jj_rescan) trace_return("SQLBetweenClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_45()) { if (!jj_rescan) trace_return("SQLBetweenClause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("SQLBetweenClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_232()
 {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(O_COMMA)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (!jj_rescan) trace_call("SQLInClause(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) { if (!jj_rescan) trace_return("SQLInClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(O_OPENPAREN)) { if (!jj_rescan) trace_return("SQLInClause(LOOKAHEAD FAILED)"); return true; }
    xsp = jj_scanpos;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) { if (!jj_rescan) trace_return("SQLInClause(LOOKAHEAD FAILED)"); return true; }
    }
    if (jj_scan_token(O_CLOSEPAREN)) { if (!jj_rescan) trace_return("SQLInClause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("SQLInClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_253()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    return false;
  }

  private boolean jj_3R_247()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_246()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) jj_scanpos = xsp;
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_3R_216()) return true;
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_244()
 {
    if (!jj_rescan) trace_call("SQLRelationalOperatorExpression(LOOKING AHEAD...)");
    if (jj_3R_191()) { if (!jj_rescan) trace_return("SQLRelationalOperatorExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) { if (!jj_rescan) trace_return("SQLRelationalOperatorExpression(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("SQLRelationalOperatorExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_107()
 {
    if (!jj_rescan) trace_call("SQLExpressionList(LOOKING AHEAD...)");
    if (jj_3R_45()) { if (!jj_rescan) trace_return("SQLExpressionList(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("SQLExpressionList(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_3()
 {
    if (jj_3R_34()) return true;
    if (jj_scan_token(158)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(O_COMMA)) return true;
    return false;
  }

  private boolean jj_3R_196()
 {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_219()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_231()
 {
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3R_218()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(109)) jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) return true;
    }
    return false;
  }

  private boolean jj_3R_217()
 {
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_3R_107()) return true;
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_230()
 {
    if (jj_scan_token(O_COMMA)) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_206()
 {
    if (!jj_rescan) trace_call("SQLRelationalExpression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) { if (!jj_rescan) trace_return("SQLRelationalExpression(LOOKAHEAD FAILED)"); return true; }
    }
    xsp = jj_scanpos;
    if (jj_3R_219()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("SQLRelationalExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_228()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_243()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (!jj_rescan) trace_call("ExistsClause(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) { if (!jj_rescan) trace_return("ExistsClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(O_OPENPAREN)) { if (!jj_rescan) trace_return("ExistsClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_216()) { if (!jj_rescan) trace_return("ExistsClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(O_CLOSEPAREN)) { if (!jj_rescan) trace_return("ExistsClause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("ExistsClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_202()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_195()
 {
    if (!jj_rescan) trace_call("SQLUnaryLogicalExpression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) { if (!jj_rescan) trace_return("SQLUnaryLogicalExpression(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("SQLUnaryLogicalExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_201()
 {
    if (!jj_rescan) trace_call("PragmaDeclaration(LOOKING AHEAD...)");
    if (jj_scan_token(K_PRAGMA)) { if (!jj_rescan) trace_return("PragmaDeclaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("PragmaDeclaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_180()
 {
    if (!jj_rescan) trace_call("SQLAndExpression(LOOKING AHEAD...)");
    if (jj_3R_195()) { if (!jj_rescan) trace_return("SQLAndExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_196()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("SQLAndExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_162()
 {
    if (!jj_rescan) trace_call("SQLExpression(LOOKING AHEAD...)");
    if (jj_3R_180()) { if (!jj_rescan) trace_return("SQLExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_181()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("SQLExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_215()
 {
    if (!jj_rescan) trace_call("ForUpdateClause(LOOKING AHEAD...)");
    if (jj_scan_token(K_FOR)) { if (!jj_rescan) trace_return("ForUpdateClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_UPDATE)) { if (!jj_rescan) trace_return("ForUpdateClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_OF)) { if (!jj_rescan) trace_return("ForUpdateClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_34()) { if (!jj_rescan) trace_return("ForUpdateClause(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("ForUpdateClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_229()
 {
    if (jj_scan_token(O_COMMA)) return true;
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(O_OPENPAREN)) return true;
    return false;
  }

  private boolean jj_3R_214()
 {
    if (!jj_rescan) trace_call("OrderByClause(LOOKING AHEAD...)");
    if (jj_scan_token(K_ORDER)) { if (!jj_rescan) trace_return("OrderByClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_BY)) { if (!jj_rescan) trace_return("OrderByClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_45()) { if (!jj_rescan) trace_return("OrderByClause(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_228()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_229()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("OrderByClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_242()
 {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_241()
 {
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_3R_186()) return true;
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_240()
 {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_227()
 {
    if (!jj_rescan) trace_call("SetClause(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) { if (!jj_rescan) trace_return("SetClause(LOOKAHEAD FAILED)"); return true; }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) { if (!jj_rescan) trace_return("SetClause(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("SetClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_239()
 {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_226()
 {
    if (!jj_rescan) trace_call("GroupByClause(LOOKING AHEAD...)");
    if (jj_scan_token(K_GROUP)) { if (!jj_rescan) trace_return("GroupByClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_BY)) { if (!jj_rescan) trace_return("GroupByClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_107()) { if (!jj_rescan) trace_return("GroupByClause(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("GroupByClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_200()
 {
    if (!jj_rescan) trace_call("CursorDeclaration(LOOKING AHEAD...)");
    if (jj_scan_token(K_CURSOR)) { if (!jj_rescan) trace_return("CursorDeclaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("CursorDeclaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_238()
 {
    if (jj_scan_token(K_START)) return true;
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_237()
 {
    if (jj_scan_token(K_START)) return true;
    if (jj_scan_token(K_WITH)) return true;
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_225()
 {
    if (!jj_rescan) trace_call("ConnectClause(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) jj_scanpos = xsp;
    if (jj_scan_token(K_CONNECT)) { if (!jj_rescan) trace_return("ConnectClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_BY)) { if (!jj_rescan) trace_return("ConnectClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_162()) { if (!jj_rescan) trace_return("ConnectClause(LOOKAHEAD FAILED)"); return true; }
    xsp = jj_scanpos;
    if (jj_3R_238()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("ConnectClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_224()
 {
    if (!jj_rescan) trace_call("WhereClause(LOOKING AHEAD...)");
    if (jj_scan_token(K_WHERE)) { if (!jj_rescan) trace_return("WhereClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_162()) { if (!jj_rescan) trace_return("WhereClause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("WhereClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_199()
 {
    if (!jj_rescan) trace_call("IdentifierDeclaration(LOOKING AHEAD...)");
    if (jj_scan_token(S_IDENTIFIER)) { if (!jj_rescan) trace_return("IdentifierDeclaration(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("IdentifierDeclaration(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_223()
 {
    if (jj_scan_token(O_COMMA)) return true;
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3R_189()
 {
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_236()
 {
    if (jj_scan_token(K_JOIN)) return true;
    if (jj_3R_166()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_250()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_235()
 {
    if (jj_scan_token(O_COMMA)) return true;
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_222()
 {
    if (!jj_rescan) trace_call("FromItem(LOOKING AHEAD...)");
    if (jj_3R_166()) { if (!jj_rescan) trace_return("FromItem(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("FromItem(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_170()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_158()
 {
    if (!jj_rescan) trace_call("Declarations(LOOKING AHEAD...)");
    Token xsp;
    if (jj_3R_170()) { if (!jj_rescan) trace_return("Declarations(LOOKAHEAD FAILED)"); return true; }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("Declarations(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_209()
 {
    if (!jj_rescan) trace_call("FromClause(LOOKING AHEAD...)");
    if (jj_scan_token(K_FROM)) { if (!jj_rescan) trace_return("FromClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_222()) { if (!jj_rescan) trace_return("FromClause(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_223()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("FromClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_131()
 {
    if (!jj_rescan) trace_call("DeclarationSection(LOOKING AHEAD...)");
    if (jj_scan_token(K_DECLARE)) { if (!jj_rescan) trace_return("DeclarationSection(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_158()) { if (!jj_rescan) trace_return("DeclarationSection(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("DeclarationSection(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_234()
 {
    if (!jj_rescan) trace_call("IntoItem(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) { if (!jj_rescan) trace_return("IntoItem(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("IntoItem(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_245()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_233()
 {
    if (jj_scan_token(O_COMMA)) return true;
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_221()
 {
    if (!jj_rescan) trace_call("IntoClause(LOOKING AHEAD...)");
    if (jj_scan_token(K_INTO)) { if (!jj_rescan) trace_return("IntoClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_234()) { if (!jj_rescan) trace_return("IntoClause(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("IntoClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_220()
 {
    if (jj_3R_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(O_DOT)) return true;
    if (jj_3R_43()) return true;
    if (jj_scan_token(167)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_43()) return true;
    if (jj_scan_token(167)) return true;
    return false;
  }

  private boolean jj_3R_203()
 {
    if (jj_3R_207()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_207()
 {
    if (!jj_rescan) trace_call("SelectItem(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) { if (!jj_rescan) trace_return("SelectItem(LOOKAHEAD FAILED)"); return true; }
    }
    }
    { if (!jj_rescan) trace_return("SelectItem(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_198()
 {
    if (!jj_rescan) trace_call("SelectList(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_3R_203()) { if (!jj_rescan) trace_return("SelectList(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("SelectList(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_213()
 {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_212()
 {
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_211()
 {
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3R_210()
 {
    if (jj_3R_224()) return true;
    return false;
  }

  private boolean jj_3R_208()
 {
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_197()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    return false;
  }

  private boolean jj_3R_186()
 {
    if (!jj_rescan) trace_call("SelectWithoutOrder(LOOKING AHEAD...)");
    if (jj_scan_token(K_SELECT)) { if (!jj_rescan) trace_return("SelectWithoutOrder(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    if (jj_3R_198()) { if (!jj_rescan) trace_return("SelectWithoutOrder(LOOKAHEAD FAILED)"); return true; }
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_3R_209()) { if (!jj_rescan) trace_return("SelectWithoutOrder(LOOKAHEAD FAILED)"); return true; }
    xsp = jj_scanpos;
    if (jj_3R_210()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_211()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("SelectWithoutOrder(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_205()
 {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_204()
 {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    if (!jj_rescan) trace_call("SelectStatement(LOOKING AHEAD...)");
    if (jj_3R_186()) { if (!jj_rescan) trace_return("SelectStatement(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("SelectStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_42()
 {
    if (!jj_rescan) trace_call("Arguments(LOOKING AHEAD...)");
    if (jj_3R_59()) { if (!jj_rescan) trace_return("Arguments(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("Arguments(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_251()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_252()
 {
    if (jj_scan_token(K_CAST)) return true;
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(K_AS)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_185()
 {
    if (jj_scan_token(K_TABLE)) return true;
    if (jj_scan_token(O_OPENPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) return true;
    }
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_3R_43()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_166()
 {
    if (!jj_rescan) trace_call("TableReference(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) { if (!jj_rescan) trace_return("TableReference(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("TableReference(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_191()
 {
    if (!jj_rescan) trace_call("Relop(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) { if (!jj_rescan) trace_return("Relop(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("Relop(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_43()
 {
    if (!jj_rescan) trace_call("OracleObjectName(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) { if (!jj_rescan) trace_return("OracleObjectName(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("OracleObjectName(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_34()
 {
    if (!jj_rescan) trace_call("TableColumn(LOOKING AHEAD...)");
    if (jj_3R_43()) { if (!jj_rescan) trace_return("TableColumn(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("TableColumn(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_190()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(O_DOT)) return true;
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_3R_69()) return true;
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_scan_token(K_SQL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(162)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) jj_scanpos = xsp;
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(O_OPENPAREN)) return true;
    if (jj_3R_42()) return true;
    if (jj_scan_token(O_CLOSEPAREN)) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    }
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (!jj_rescan) trace_call("PlSqlPrimaryExpression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) { if (!jj_rescan) trace_return("PlSqlPrimaryExpression(LOOKAHEAD FAILED)"); return true; }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    { if (!jj_rescan) trace_return("PlSqlPrimaryExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_133()
 {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (!jj_rescan) trace_call("PlSqlUnaryExpression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) { if (!jj_rescan) trace_return("PlSqlUnaryExpression(LOOKAHEAD FAILED)"); return true; }
    }
    { if (!jj_rescan) trace_return("PlSqlUnaryExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_86()
 {
    if (!jj_rescan) trace_call("PlSqlExpotentExpression(LOOKING AHEAD...)");
    if (jj_3R_105()) { if (!jj_rescan) trace_return("PlSqlExpotentExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("PlSqlExpotentExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_65()
 {
    if (!jj_rescan) trace_call("PlSqlMultiplicativeExpression(LOOKING AHEAD...)");
    if (jj_3R_86()) { if (!jj_rescan) trace_return("PlSqlMultiplicativeExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("PlSqlMultiplicativeExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_55()
 {
    if (!jj_rescan) trace_call("PlSqlSimpleExpression(LOOKING AHEAD...)");
    if (jj_3R_65()) { if (!jj_rescan) trace_return("PlSqlSimpleExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_66()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("PlSqlSimpleExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_192()
 {
    if (!jj_rescan) trace_call("IsNullClause(LOOKING AHEAD...)");
    if (jj_scan_token(K_IS)) { if (!jj_rescan) trace_return("IsNullClause(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) { if (!jj_rescan) trace_return("IsNullClause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("IsNullClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(O_COMMA)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (!jj_rescan) trace_call("PlSqlLikeClause(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) { if (!jj_rescan) trace_return("PlSqlLikeClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_55()) { if (!jj_rescan) trace_return("PlSqlLikeClause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("PlSqlLikeClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_38()
 {
    if (!jj_rescan) trace_call("PlSqlBetweenClause(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) { if (!jj_rescan) trace_return("PlSqlBetweenClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_55()) { if (!jj_rescan) trace_return("PlSqlBetweenClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_AND)) { if (!jj_rescan) trace_return("PlSqlBetweenClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_55()) { if (!jj_rescan) trace_return("PlSqlBetweenClause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("PlSqlBetweenClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_37()
 {
    if (!jj_rescan) trace_call("PlSqlInClause(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) { if (!jj_rescan) trace_return("PlSqlInClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(O_OPENPAREN)) { if (!jj_rescan) trace_return("PlSqlInClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_3R_59()) { if (!jj_rescan) trace_return("PlSqlInClause(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(O_CLOSEPAREN)) { if (!jj_rescan) trace_return("PlSqlInClause(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("PlSqlInClause(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_109()
 {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (!jj_rescan) trace_call("PlSqlExpressionList(LOOKING AHEAD...)");
    if (jj_3R_69()) { if (!jj_rescan) trace_return("PlSqlExpressionList(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_70()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("PlSqlExpressionList(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_177()
 {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_3R_191()) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (!jj_rescan) trace_call("PlSqlRelationalExpression(LOOKING AHEAD...)");
    if (jj_3R_55()) { if (!jj_rescan) trace_return("PlSqlRelationalExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    { if (!jj_rescan) trace_return("PlSqlRelationalExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_108()
 {
    if (!jj_rescan) trace_call("PlSqlUnaryLogicalExpression(LOOKING AHEAD...)");
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(94)) jj_scanpos = xsp;
    if (jj_3R_135()) { if (!jj_rescan) trace_return("PlSqlUnaryLogicalExpression(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("PlSqlUnaryLogicalExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_89()
 {
    if (!jj_rescan) trace_call("PlSqlAndExpression(LOOKING AHEAD...)");
    if (jj_3R_108()) { if (!jj_rescan) trace_return("PlSqlAndExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_109()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("PlSqlAndExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_69()
 {
    if (!jj_rescan) trace_call("PlSqlExpression(LOOKING AHEAD...)");
    if (jj_3R_89()) { if (!jj_rescan) trace_return("PlSqlExpression(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    { if (!jj_rescan) trace_return("PlSqlExpression(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_155()
 {
    if (!jj_rescan) trace_call("QueryStatement(LOOKING AHEAD...)");
    if (jj_3R_169()) { if (!jj_rescan) trace_return("QueryStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("QueryStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_148()
 {
    if (!jj_rescan) trace_call("DeleteStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_DELETE)) { if (!jj_rescan) trace_return("DeleteStatement(LOOKAHEAD FAILED)"); return true; }
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) jj_scanpos = xsp;
    if (jj_3R_166()) { if (!jj_rescan) trace_return("DeleteStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("DeleteStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3R_150()
 {
    if (!jj_rescan) trace_call("InsertStatement(LOOKING AHEAD...)");
    if (jj_scan_token(K_INSERT)) { if (!jj_rescan) trace_return("InsertStatement(LOOKAHEAD FAILED)"); return true; }
    if (jj_scan_token(K_INTO)) { if (!jj_rescan) trace_return("InsertStatement(LOOKAHEAD FAILED)"); return true; }
    { if (!jj_rescan) trace_return("InsertStatement(LOOKAHEAD SUCCEEDED)"); return false; }
  }

  private boolean jj_3_6()
 {
    Token xsp;
    if (jj_scan_token(25)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(25)) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(K_SELECT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public FormsPlSqlTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[205];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000000,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x20000000,0x0,0x2000000,0x20000000,0x0,0x0,0x20,0x20,0x0,0x20,0x0,0x0,0x0,0x0,0x800,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x2000000,0x1000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x0,0x6400000,0x0,0x0,0x0,0x800,0x0,0x800,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x2000000,0x6400000,0x0,0x800,0x6400000,0x800,0x2000000,0x0,0x0,0x0,0x6400000,0x0,0x0,0x0,0x0,0x9b70000,0x0,0x9b70000,0x800,0x0,0x0,0x0,0x0,0x4400200,0x4400200,0x40000040,0x40000040,0x0,0x4400000,0x6400000,0x0,0x1000,0x1000,0x0,0x0,0x2000000,0x1000,0x1000,0x0,0x9b70000,0x1000,0x0,0x0,0x800,0x4400000,0x4400000,0x4400000,0x0,0x0,0x20,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x6400040,0x0,0x6400000,0x800,0x1000,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x800,0x0,0x0,0x0,0x6400000,0x0,0x0,0x6400000,0x9b70000,0x0,0x9b70000,0x800,0x0,0x0,0x0,0x6400000,0x0,0x6400000,0x0,0x0,0x4400200,0x4400200,0x40000040,0x40000040,0x0,0x4400000,0x4400000,0x0,0x2000000,0x0,0x6400000,0x0,0x1000,0x1000,0x0,0x0,0x6400040,0x6400040,0x1000,0x1000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x8000,0x0,0x100,0x0,0x8,0x5024020,0x0,0x0,0x0,0x200000,0x200000,0x0,0x0,0x482280,0x0,0x0,0x0,0x200000,0x0,0x0,0x200000,0x0,0x2000000,0x2000000,0x0,0x2000000,0x0,0x402280,0x0,0x2000,0x0,0x0,0x402280,0x0,0x0,0x5024020,0x0,0x0,0x0,0x1000000,0x5024020,0x4024000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100800,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x100800,0x0,0x0,0x2,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x402280,0x0,0x0,0x10000001,0x10000001,0x0,0x0,0x40000,0x0,0x0,0x0,0x800,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x8000010,0x8000010,0x0,0x8000010,0x8000010,0x0,0x0,0x2,0x0,0x800,0x0,0x0,0x800,0x0,0x0,0x40,0x0,0x5,0x5,0x0,0x800,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x800,0x40000000,0x0,0x0,0x10000001,0x10000001,0x800,0x800,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x200000,0x6024d60,0x0,0x400,0x0,0x0,0x0,0x400,0x400,0x20040082,0x0,0x0,0x200000,0x0,0x0,0x200000,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x20040080,0x0,0x20040080,0x0,0x0,0x20040080,0x2,0x0,0x6024960,0x0,0x0,0x0,0x0,0x6024960,0x2020040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000100,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x8,0x0,0x0,0x0,0x40000010,0x0,0x0,0x40000000,0x0,0x0,0x0,0x200,0x0,0x40000010,0x0,0x0,0x0,0x40000000,0x0,0x200000,0x41208000,0x0,0x40000000,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x20048080,0x0,0x100,0x0,0x0,0x100000,0x0,0x0,0x1000,0x8080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x2000,0x0,0x8080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x200000,0x41208000,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x20,0x0,0x0,0x0,0x1a90c011,0x0,0x4000,0x0,0x1000,0x1000,0x4000,0x4000,0x20002,0x0,0x0,0x0,0x1000,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x20002,0x0,0x20002,0x0,0x0,0x20002,0x0,0x0,0x1a908011,0x0,0x20,0x100,0x0,0x1a908011,0x1a800010,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x80000001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x0,0x0,0x8,0x10000,0x20000000,0x1000000,0x1000000,0x21000000,0x0,0x0,0x0,0x2001,0x0,0x0,0x80000001,0x0,0x0,0x8000000,0x0,0x0,0x2001,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000001,0x0,0x0,0x0,0x0,0x1,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x20202,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x2001,0x0,0x2000,0x2001,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2001,0x0,0x8000001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x80000001,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x90040a0,0x1000000,0x0,0x1000020,0x1000000,0x1000000,0x0,0x0,0x21000c00,0x0,0x0,0x0,0x1000000,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0xc0000000,0xc00,0x1000000,0xc00,0x0,0x0,0xc00,0x0,0x1000000,0x9004080,0x1000,0x0,0x1000000,0x0,0x9004080,0x80,0x0,0x0,0x0,0x0,0x9000000,0x1000000,0x1000,0x0,0x0,0x1000000,0x4000,0x1000000,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x39040000,0x10000,0x0,0x9000000,0x0,0x9000000,0x0,0x0,0x0,0x10000,0x0,0x8,0x0,0x20000,0x100,0x0,0x80,0x80,0x0,0x1000000,0x0,0x21000000,0x39040000,0x2000,0x0,0x39040000,0x0,0x0,0x200,0x0,0x1000000,0x39040000,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x39040000,0x0,0x0,0x0,0x0,0x0,0x19040000,0x0,0x0,0x21000000,0x0,0x0,0x1000000,0x21000002,0x0,0x0,0x0,0x1040000,0x0,0x0,0x0,0x0,0x21000c00,0x0,0x0,0x0,0x0,0x0,0x2000,0x1,0x0,0x40,0x0,0x39040000,0x1000000,0x39040000,0x0,0x0,0x9000000,0x0,0x1000000,0x1000000,0x0,0x1,0x1,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x39040000,0x0,0x0,0x39040000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x39040000,0x0,0x39040000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x39040000,0x1000,0x39040000,0x0,0x0,0x0,0x0,0x0,0x39040000,0x39040000,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x78,0x0,0x0,0x78,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[24];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public FormsPlSql(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public FormsPlSql(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new FormsPlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 205; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 205; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public FormsPlSql(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new FormsPlSqlTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 205; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 205; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public FormsPlSql(FormsPlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 205; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(FormsPlSqlTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 205; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[168];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 205; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 168; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 24; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

} // class FormsPlSql ends here

