/* FormsPlSqlTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. FormsPlSqlTokenManager.java */
package br.pucrio.tecgraf.plsql.lng.grammer;
import java.util.*;
import br.pucrio.tecgraf.plsql.lng.node.*;
import java.io.* ;
import java.util.* ;

/** Token Manager. */
@SuppressWarnings("unused")public class FormsPlSqlTokenManager implements FormsPlSqlConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x400000L) != 0L)
            return 0;
         if ((active0 & 0x3000L) != 0L || (active2 & 0x8000000000L) != 0L)
            return 47;
         if ((active0 & 0xffffffff00000000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x3ffffL) != 0L)
         {
            jjmatchedKind = 152;
            return 48;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 3;
         if ((active0 & 0x420L) != 0L)
            return 13;
         return -1;
      case 1:
         if ((active0 & 0x2000041800000000L) != 0L || (active1 & 0xec003fc000L) != 0L || (active2 & 0x8L) != 0L)
            return 48;
         if ((active0 & 0xdffffbe700000000L) != 0L || (active1 & 0xffffff13ffc03fffL) != 0L || (active2 & 0x3fff7L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 152;
               jjmatchedPos = 1;
            }
            return 48;
         }
         return -1;
      case 2:
         if ((active0 & 0x1700000000L) != 0L || (active1 & 0x9108020040000101L) != 0L || (active2 & 0x100L) != 0L)
            return 48;
         if ((active0 & 0xdffffbe000000000L) != 0L || (active1 & 0x6ef7fd9bbfdf3efeL) != 0L || (active2 & 0x3fef7L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 2;
            return 48;
         }
         return -1;
      case 3:
         if ((active0 & 0x97bfc2e000000000L) != 0L || (active1 & 0x6ef4fd82a88f34deL) != 0L || (active2 & 0x26ed3L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 3;
            return 48;
         }
         if ((active0 & 0x4840390000000000L) != 0L || (active1 & 0x3001917500a20L) != 0L || (active2 & 0x19024L) != 0L)
            return 48;
         return -1;
      case 4:
         if ((active0 & 0x8000402000000000L) != 0L || (active1 & 0x2000a080088110c0L) != 0L || (active2 & 0x26043L) != 0L)
            return 48;
         if ((active0 & 0x17bf82c000000000L) != 0L || (active1 & 0x4ef45d02a00e241eL) != 0L || (active2 & 0xe90L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 4;
            return 48;
         }
         return -1;
      case 5:
         if ((active0 & 0x422800000000000L) != 0L || (active1 & 0x814110280022010L) != 0L || (active2 & 0x280L) != 0L)
            return 48;
         if ((active0 & 0x139d02c000000000L) != 0L || (active1 & 0x46e04c00200c040eL) != 0L || (active2 & 0xc10L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 5;
            return 48;
         }
         return -1;
      case 6:
         if ((active0 & 0x1008000000000000L) != 0L || (active1 & 0x428048000008040eL) != 0L || (active2 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 152;
               jjmatchedPos = 6;
            }
            return 48;
         }
         if ((active0 & 0x395024000000000L) != 0L || (active1 & 0x460040020040000L) != 0L || (active2 & 0xc00L) != 0L)
            return 48;
         if ((active0 & 0x8000000000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 152;
               jjmatchedPos = 6;
            }
            return 11;
         }
         return -1;
      case 7:
         if ((active0 & 0x1008000000000000L) != 0L || (active1 & 0x4080080000000400L) != 0L)
            return 48;
         if ((active2 & 0x400L) != 0L)
            return 11;
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 7;
            return 11;
         }
         if ((active1 & 0x20040000008000eL) != 0L || (active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 7;
            return 48;
         }
         return -1;
      case 8:
         if ((active0 & 0x8000000000L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 152;
               jjmatchedPos = 8;
            }
            return 11;
         }
         if ((active1 & 0x20040000008000eL) != 0L)
            return 48;
         if ((active2 & 0x10L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 152;
               jjmatchedPos = 8;
            }
            return 48;
         }
         return -1;
      case 9:
         if ((active2 & 0x10L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 9;
            return 48;
         }
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 9;
            return 11;
         }
         return -1;
      case 10:
         if ((active2 & 0x10L) != 0L)
            return 48;
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 10;
            return 11;
         }
         return -1;
      case 11:
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 11;
            return 11;
         }
         return -1;
      case 12:
         if ((active0 & 0x8000000000L) != 0L || (active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 12;
            return 11;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L, 0x0L);
      case 35:
         return jjStopAtPos(0, 27);
      case 36:
         return jjStopAtPos(0, 14);
      case 37:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x78c0000000L);
      case 40:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L, 0x0L);
      case 41:
         return jjStopAtPos(0, 8);
      case 42:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x400000000L);
      case 43:
         return jjStopAtPos(0, 26);
      case 44:
         return jjStopAtPos(0, 11);
      case 45:
         return jjStartNfaWithStates_0(0, 22, 0);
      case 46:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L, 0x8000000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 30, 3);
      case 58:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 29);
      case 60:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0xa00000L, 0x0L, 0x100000000L);
      case 61:
         return jjStopAtPos(0, 16);
      case 62:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L, 0x200000000L);
      case 63:
         return jjStopAtPos(0, 28);
      case 64:
         return jjStopAtPos(0, 7);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1f00000000L, 0x0L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x7e000000000L, 0x0L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3ff80000000000L, 0x0L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3fc0000000000000L, 0x0L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0xc000000000000000L, 0x3fL, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c0L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fc000L, 0x0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7800000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x18000000L, 0x0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e0000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fc00000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c0000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ff800000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe00000000000000L, 0x1L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3eL);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1c0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xe00L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x3f000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L, 0x0L);
      case 126:
         return jjStopAtPos(0, 31);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 162);
         else if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         break;
      case 43:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L, active2, 0L);
      case 46:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 60:
         if ((active2 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 160);
         break;
      case 61:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      case 62:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         else if ((active2 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 161);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40180000000000L, active1, 0x200840020002000L, active2, 0xe02L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xf80006000000000L, active1, 0x1c7f000000800040L, active2, 0L);
      case 70:
      case 102:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 78, 48);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(1, 98, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x800000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x2000000000000000L, active2, 0x7004L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000008000000000L, active1, 0x9000000L, active2, 0x2000008000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000400100000000L, active1, 0x80L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L, active1, 0x8001f0001L, active2, 0x1000000040L);
      case 79:
      case 111:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 61, 48);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 131, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0xf030000000000L, active1, 0x1800800d6400900L, active2, 0x10000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000000000L, active2, 0x80L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 82:
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0x708000001200L, active2, 0x4080020010L);
      case 83:
      case 115:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 85, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L, active2, 0x100L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000000000L, active2, 0x40000001L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000000L, active1, 0x20300000400L, active2, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3eL, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 48);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 124:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(2, 19);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0x6003100000000000L, active2, 0x11L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 67:
      case 99:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x180000000000000L, active1, 0x404000200000eL, active2, 0L);
      case 68:
      case 100:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 48);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0x8010010000L, active2, 0x80L);
      case 69:
      case 101:
         if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 136, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0x1000000000L, active2, 0x3004L);
      case 70:
      case 102:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 115, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0x400000000000000L, active2, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xa00000400030L, active2, 0x24040L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 48);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 127, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0x880000900000000L, active2, 0x200L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000000L, active1, 0x200000000L, active2, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0xc008000000000L, active1, 0x8000400L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x420000000000L, active1, 0x400004001280L, active2, 0x5880000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000000L, active2, 0x20L);
      case 82:
      case 114:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 72, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000000000L, active1, 0L, active2, 0x10c00L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xd800180000000000L, active1, 0x80000020000L, active2, 0x2000000000L);
      case 84:
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(2, 94, 48);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 105, 48);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 124, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0x40004000000000L, active1, 0x100000201c0840L, active2, 0x8000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x240000000802000L, active2, 0L);
      case 87:
      case 119:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 120, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 89:
      case 121:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 48);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200808000000000L, active1, 0x80000080L, active2, 0x80L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 67:
      case 99:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000440L, active2, 0xc00L);
      case 68:
      case 100:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 112, 48);
         break;
      case 69:
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 48);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 48);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 48);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 88, 48);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 92, 48);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 133, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0xa400180008f0006L, active2, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 72:
      case 104:
         if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 143, 48);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x8080002000000000L, active1, 0x80000002000L, active2, 0L);
      case 75:
      case 107:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 48);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 144, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 48);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x100020000000000L, active1, 0x40a0000000000008L, active2, 0x4002L);
      case 77:
      case 109:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x3000000000000L, active1, 0x400000000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 48);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 48);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 130, 48);
         else if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 140, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L, active2, 0x10L);
      case 79:
      case 111:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 48);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4200000000000L, active2, 0x2000000040L);
      case 80:
      case 112:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x40000000L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x2000000000000000L, active2, 0x2001L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x28400000000000L, active1, 0x800000000010L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 48);
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 69, 48);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0L, active2, 0x1000020000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10000028001000L, active2, 0x800000200L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L, active2, 0x4080000000L);
      case 89:
      case 121:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 40, 48);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0x20040000000000L, active2, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000000000000L, active2, 0x4000000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 48);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 111, 48);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 125, 48);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 129, 48);
         else if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(4, 141, 48);
         else if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 142, 48);
         else if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 145, 48);
         else if ((active2 & 0x40000000L) != 0L)
            return jjStopAtPos(4, 158);
         return jjMoveStringLiteralDfa5_0(active0, 0x15024000000000L, active1, 0x400400200000000L, active2, 0x200L);
      case 70:
      case 102:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 63, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x1000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000L, active2, 0L);
      case 72:
      case 104:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0xc00L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1002000000000000L, active1, 0x80000000L, active2, 0L);
      case 76:
      case 108:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 87, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x100000000000L, active2, 0L);
      case 78:
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 48);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 134, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000L, active2, 0x800000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 80:
      case 112:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000006L, active2, 0x2000000000L);
      case 82:
      case 114:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 103, 48);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 109, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x540100200a0000L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 91, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 84:
      case 116:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 71, 48);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 48);
         return jjMoveStringLiteralDfa5_0(active0, 0x408800000000000L, active1, 0x80000000410L, active2, 0x80000080L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L, active1, 0x8L, active2, 0L);
      case 88:
      case 120:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 108, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x88020000000000L, active1, 0x80000020000000L, active2, 0xc10L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000L, active1, 0x20000000000000L, active2, 0L);
      case 68:
      case 100:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 48);
         else if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(5, 163);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 69:
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 48);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 48);
         else if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 135, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x40000L, active2, 0x2000000000L);
      case 71:
      case 103:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4000080000000400L, active2, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 78:
      case 110:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x1011000000000000L, active1, 0x400000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000000L, active2, 0x5000000000L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 48);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 83:
      case 115:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(5, 68, 48);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 104, 48);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 137, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000080008L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 48);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 48);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(5, 95, 48);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 123, 48);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x6L, active2, 0L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L, active1, 0L, active2, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000000L, active1, 0x80000000000000L, active2, 0x10L);
      case 69:
      case 101:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 48);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 106, 48);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 48);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 118, 48);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000000eL, active2, 0L);
      case 76:
      case 108:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 48);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 93, 48);
         break;
      case 78:
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 48);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 41, 48);
         else if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 165);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x4000000000000000L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400L, active2, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x80000000L);
      case 82:
      case 114:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(6, 82, 48);
         else if ((active2 & 0x800L) != 0L)
         {
            jjmatchedKind = 139;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x400L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 48);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 48);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 48);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 122, 48);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000L, active2, 0x5000000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 50:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 138, 11);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 69:
      case 101:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 48);
         else if ((active2 & 0x80000000L) != 0L)
            return jjStopAtPos(7, 159);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 75:
      case 107:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 119, 48);
         break;
      case 78:
      case 110:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 74, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000000L, active2, 0x5000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x6L, active2, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 48);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 48);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 126, 48);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(8, 164);
         break;
      case 69:
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 48);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 110, 48);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 78:
      case 110:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0x4L, active2, 0L);
      case 84:
      case 116:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 83, 48);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 121, 48);
         else if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(8, 166);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 78:
      case 110:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 132, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 82:
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 39, 11);
         break;
      case 84:
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(13, 66, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 47;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 146)
                        kind = 146;
                     { jjCheckNAddStates(0, 6); }
                  }
                  else if (curChar == 46)
                     { jjCheckNAddTwoStates(27, 37); }
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(24, 25); }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(19, 20); }
                  else if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 48:
               case 11:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  { jjCheckNAdd(11); }
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 146)
                        kind = 146;
                     { jjCheckNAdd(37); }
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 146)
                        kind = 146;
                     { jjCheckNAddTwoStates(27, 28); }
                  }
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 150)
                     kind = 150;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 150)
                     kind = 150;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 4:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 5:
                  if (curChar == 42)
                     { jjCheckNAddStates(7, 9); }
                  break;
               case 6:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 7:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 8:
                  if (curChar == 47 && kind > 151)
                     kind = 151;
                  break;
               case 9:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 12:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 14:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjAddStates(10, 11); }
                  break;
               case 15:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 18:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 19:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar != 39)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(22, 20); }
                  break;
               case 22:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(22, 20); }
                  break;
               case 23:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 24:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 25:
                  if (curChar == 34 && kind > 157)
                     kind = 157;
                  break;
               case 26:
                  if (curChar == 46)
                     { jjCheckNAddTwoStates(27, 37); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAddTwoStates(27, 28); }
                  break;
               case 29:
                  if ((0x280000000000L & l) != 0L)
                     { jjAddStates(12, 13); }
                  break;
               case 30:
                  if (curChar == 46)
                     { jjCheckNAdd(31); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAdd(31); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAddStates(14, 16); }
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAdd(33); }
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAddTwoStates(34, 35); }
                  break;
               case 35:
                  if (curChar == 46)
                     { jjCheckNAdd(36); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAdd(36); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAdd(37); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAddStates(0, 6); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAddTwoStates(39, 28); }
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 41:
                  if (curChar == 46)
                     { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAddTwoStates(42, 28); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 44:
                  if (curChar == 46)
                     { jjCheckNAdd(45); }
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAdd(45); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 146)
                     kind = 146;
                  { jjCheckNAdd(46); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
               case 10:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 48:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 152)
                        kind = 152;
                     { jjCheckNAdd(11); }
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 152)
                        kind = 152;
                     { jjCheckNAddTwoStates(10, 11); }
                  }
                  break;
               case 1:
                  if (kind > 150)
                     kind = 150;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 6:
               case 7:
                  { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  { jjCheckNAdd(11); }
                  break;
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAddStates(20, 22); }
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAddTwoStates(14, 15); }
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAddTwoStates(16, 17); }
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 155)
                     kind = 155;
                  { jjCheckNAdd(17); }
                  break;
               case 19:
                  { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 22:
                  { jjCheckNAddTwoStates(22, 20); }
                  break;
               case 24:
                  { jjAddStates(23, 24); }
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(25, 27); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 150)
                     kind = 150;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(4, 5); }
                  break;
               case 6:
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(7, 5); }
                  break;
               case 19:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 22:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(22, 20); }
                  break;
               case 24:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(23, 24); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 || l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 47 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   39, 40, 41, 28, 43, 44, 46, 5, 6, 8, 14, 15, 30, 32, 33, 34, 
   35, 40, 41, 28, 13, 14, 15, 24, 25, 29, 30, 32, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\72\75", "\52", "\100", "\51", "\174\174", "\72", 
"\54", "\56", "\56\56", "\44", "\45", "\75", "\76", "\76\75", "\50\53\51", "\74", 
"\74\75", "\55", "\74\76", "\41\75", "\50", "\53", "\43", "\77", "\73", "\57", "\176", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\74\74", "\76\76", "\52\52", null, null, null, null, "\56\52", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public FormsPlSqlTokenManager(JavaCharStream stream){

      if (JavaCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public FormsPlSqlTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 47; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xffffffffffffffffL, 0xfff907ffffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x0L, 0xc00000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 0xc00000L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[47];
    private final int[] jjstateSet = new int[2 * 47];

    
    protected char curChar;
}
