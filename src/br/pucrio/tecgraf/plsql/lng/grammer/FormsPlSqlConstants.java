/* Generated By:JavaCC: Do not edit this line. FormsPlSqlConstants.java */
package br.pucrio.tecgraf.plsql.lng.grammer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface FormsPlSqlConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int O_ASSIGN = 5;
  /** RegularExpression Id. */
  int O_ASTERISK = 6;
  /** RegularExpression Id. */
  int O_ATSIGN = 7;
  /** RegularExpression Id. */
  int O_CLOSEPAREN = 8;
  /** RegularExpression Id. */
  int O_CONCAT = 9;
  /** RegularExpression Id. */
  int O_COLON = 10;
  /** RegularExpression Id. */
  int O_COMMA = 11;
  /** RegularExpression Id. */
  int O_DOT = 12;
  /** RegularExpression Id. */
  int O_DOUBLEDOT = 13;
  /** RegularExpression Id. */
  int O_DOLLAR = 14;
  /** RegularExpression Id. */
  int O_PERCENT = 15;
  /** RegularExpression Id. */
  int O_EQUAL = 16;
  /** RegularExpression Id. */
  int O_GREATER = 17;
  /** RegularExpression Id. */
  int O_GREATEREQUAL = 18;
  /** RegularExpression Id. */
  int O_JOINPLUS = 19;
  /** RegularExpression Id. */
  int O_LESS = 20;
  /** RegularExpression Id. */
  int O_LESSEQUAL = 21;
  /** RegularExpression Id. */
  int O_MINUS = 22;
  /** RegularExpression Id. */
  int O_NOTEQUAL2 = 23;
  /** RegularExpression Id. */
  int O_NOTEQUAL = 24;
  /** RegularExpression Id. */
  int O_OPENPAREN = 25;
  /** RegularExpression Id. */
  int O_PLUS = 26;
  /** RegularExpression Id. */
  int O_POUND = 27;
  /** RegularExpression Id. */
  int O_QUESTIONMARK = 28;
  /** RegularExpression Id. */
  int O_SEMICOLON = 29;
  /** RegularExpression Id. */
  int O_SLASH = 30;
  /** RegularExpression Id. */
  int O_TILDE = 31;
  /** RegularExpression Id. */
  int K_ALL = 32;
  /** RegularExpression Id. */
  int K_AND = 33;
  /** RegularExpression Id. */
  int K_ANY = 34;
  /** RegularExpression Id. */
  int K_AS = 35;
  /** RegularExpression Id. */
  int K_ASC = 36;
  /** RegularExpression Id. */
  int K_BEGIN = 37;
  /** RegularExpression Id. */
  int K_BETWEEN = 38;
  /** RegularExpression Id. */
  int K_BINARY_INTEGER = 39;
  /** RegularExpression Id. */
  int K_BODY = 40;
  /** RegularExpression Id. */
  int K_BOOLEAN = 41;
  /** RegularExpression Id. */
  int K_BY = 42;
  /** RegularExpression Id. */
  int K_CASE = 43;
  /** RegularExpression Id. */
  int K_CAST = 44;
  /** RegularExpression Id. */
  int K_CHAR = 45;
  /** RegularExpression Id. */
  int K_CLOSE = 46;
  /** RegularExpression Id. */
  int K_CREATE = 47;
  /** RegularExpression Id. */
  int K_COMMENT = 48;
  /** RegularExpression Id. */
  int K_COMMIT = 49;
  /** RegularExpression Id. */
  int K_CONNECT = 50;
  /** RegularExpression Id. */
  int K_CONSTANT = 51;
  /** RegularExpression Id. */
  int K_CURRENT = 52;
  /** RegularExpression Id. */
  int K_CURSOR = 53;
  /** RegularExpression Id. */
  int K_DATE = 54;
  /** RegularExpression Id. */
  int K_DECIMAL = 55;
  /** RegularExpression Id. */
  int K_DECLARE = 56;
  /** RegularExpression Id. */
  int K_DEFAULT = 57;
  /** RegularExpression Id. */
  int K_DELETE = 58;
  /** RegularExpression Id. */
  int K_DESC = 59;
  /** RegularExpression Id. */
  int K_DISTINCT = 60;
  /** RegularExpression Id. */
  int K_DO = 61;
  /** RegularExpression Id. */
  int K_ELSE = 62;
  /** RegularExpression Id. */
  int K_ELSIF = 63;
  /** RegularExpression Id. */
  int K_END = 64;
  /** RegularExpression Id. */
  int K_EXCEPTION = 65;
  /** RegularExpression Id. */
  int K_EXCEPTION_INIT = 66;
  /** RegularExpression Id. */
  int K_EXCLUSIVE = 67;
  /** RegularExpression Id. */
  int K_EXISTS = 68;
  /** RegularExpression Id. */
  int K_EXIT = 69;
  /** RegularExpression Id. */
  int K_FETCH = 70;
  /** RegularExpression Id. */
  int K_FLOAT = 71;
  /** RegularExpression Id. */
  int K_FOR = 72;
  /** RegularExpression Id. */
  int K_FROM = 73;
  /** RegularExpression Id. */
  int K_FUNCTION = 74;
  /** RegularExpression Id. */
  int K_GOTO = 75;
  /** RegularExpression Id. */
  int K_GROUP = 76;
  /** RegularExpression Id. */
  int K_HAVING = 77;
  /** RegularExpression Id. */
  int K_IF = 78;
  /** RegularExpression Id. */
  int K_IN = 79;
  /** RegularExpression Id. */
  int K_INDEX = 80;
  /** RegularExpression Id. */
  int K_INSERT = 81;
  /** RegularExpression Id. */
  int K_INTEGER = 82;
  /** RegularExpression Id. */
  int K_INTERSECT = 83;
  /** RegularExpression Id. */
  int K_INTO = 84;
  /** RegularExpression Id. */
  int K_IS = 85;
  /** RegularExpression Id. */
  int K_JOIN = 86;
  /** RegularExpression Id. */
  int K_LEVEL = 87;
  /** RegularExpression Id. */
  int K_LIKE = 88;
  /** RegularExpression Id. */
  int K_LOCK = 89;
  /** RegularExpression Id. */
  int K_LOOP = 90;
  /** RegularExpression Id. */
  int K_MINUS = 91;
  /** RegularExpression Id. */
  int K_MODE = 92;
  /** RegularExpression Id. */
  int K_NATURAL = 93;
  /** RegularExpression Id. */
  int K_NOT = 94;
  /** RegularExpression Id. */
  int K_NOWAIT = 95;
  /** RegularExpression Id. */
  int K_NULL = 96;
  /** RegularExpression Id. */
  int K_NUMBER = 97;
  /** RegularExpression Id. */
  int K_OF = 98;
  /** RegularExpression Id. */
  int K_ONLY = 99;
  /** RegularExpression Id. */
  int K_OPEN = 100;
  /** RegularExpression Id. */
  int K_OR = 101;
  /** RegularExpression Id. */
  int K_ON = 102;
  /** RegularExpression Id. */
  int K_ORDER = 103;
  /** RegularExpression Id. */
  int K_OTHERS = 104;
  /** RegularExpression Id. */
  int K_OUT = 105;
  /** RegularExpression Id. */
  int K_PACKAGE = 106;
  /** RegularExpression Id. */
  int K_POSITIVE = 107;
  /** RegularExpression Id. */
  int K_PRAGMA = 108;
  /** RegularExpression Id. */
  int K_PRIOR = 109;
  /** RegularExpression Id. */
  int K_PROCEDURE = 110;
  /** RegularExpression Id. */
  int K_RAISE = 111;
  /** RegularExpression Id. */
  int K_READ = 112;
  /** RegularExpression Id. */
  int K_REAL = 113;
  /** RegularExpression Id. */
  int K_RECORD = 114;
  /** RegularExpression Id. */
  int K_REF = 115;
  /** RegularExpression Id. */
  int K_RETURN = 116;
  /** RegularExpression Id. */
  int K_REPLACE = 117;
  /** RegularExpression Id. */
  int K_REVERSE = 118;
  /** RegularExpression Id. */
  int K_ROLLBACK = 119;
  /** RegularExpression Id. */
  int K_ROW = 120;
  /** RegularExpression Id. */
  int K_SAVEPOINT = 121;
  /** RegularExpression Id. */
  int K_SEGMENT = 122;
  /** RegularExpression Id. */
  int K_SELECT = 123;
  /** RegularExpression Id. */
  int K_SET = 124;
  /** RegularExpression Id. */
  int K_SHARE = 125;
  /** RegularExpression Id. */
  int K_SMALLINT = 126;
  /** RegularExpression Id. */
  int K_SQL = 127;
  /** RegularExpression Id. */
  int K_START = 128;
  /** RegularExpression Id. */
  int K_TABLE = 129;
  /** RegularExpression Id. */
  int K_THEN = 130;
  /** RegularExpression Id. */
  int K_TO = 131;
  /** RegularExpression Id. */
  int K_TRANSACTION = 132;
  /** RegularExpression Id. */
  int K_TYPE = 133;
  /** RegularExpression Id. */
  int K_UNION = 134;
  /** RegularExpression Id. */
  int K_UPDATE = 135;
  /** RegularExpression Id. */
  int K_USE = 136;
  /** RegularExpression Id. */
  int K_VALUES = 137;
  /** RegularExpression Id. */
  int K_VARCHAR2 = 138;
  /** RegularExpression Id. */
  int K_VARCHAR = 139;
  /** RegularExpression Id. */
  int K_WHEN = 140;
  /** RegularExpression Id. */
  int K_WHERE = 141;
  /** RegularExpression Id. */
  int K_WHILE = 142;
  /** RegularExpression Id. */
  int K_WITH = 143;
  /** RegularExpression Id. */
  int K_WORK = 144;
  /** RegularExpression Id. */
  int K_WRITE = 145;
  /** RegularExpression Id. */
  int S_NUMBER = 146;
  /** RegularExpression Id. */
  int FLOAT = 147;
  /** RegularExpression Id. */
  int INTEGER = 148;
  /** RegularExpression Id. */
  int DIGIT = 149;
  /** RegularExpression Id. */
  int LINE_COMMENT = 150;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 151;
  /** RegularExpression Id. */
  int S_IDENTIFIER = 152;
  /** RegularExpression Id. */
  int LETTER = 153;
  /** RegularExpression Id. */
  int SPECIAL_CHARS = 154;
  /** RegularExpression Id. */
  int S_BIND = 155;
  /** RegularExpression Id. */
  int S_CHAR_LITERAL = 156;
  /** RegularExpression Id. */
  int S_QUOTED_IDENTIFIER = 157;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\":=\"",
    "\"*\"",
    "\"@\"",
    "\")\"",
    "\"||\"",
    "\":\"",
    "\",\"",
    "\".\"",
    "\"..\"",
    "\"$\"",
    "\"%\"",
    "\"=\"",
    "\">\"",
    "\">=\"",
    "\"(+)\"",
    "\"<\"",
    "\"<=\"",
    "\"-\"",
    "\"<>\"",
    "\"!=\"",
    "\"(\"",
    "\"+\"",
    "\"#\"",
    "\"?\"",
    "\";\"",
    "\"/\"",
    "\"~\"",
    "\"ALL\"",
    "\"AND\"",
    "\"ANY\"",
    "\"AS\"",
    "\"ASC\"",
    "\"BEGIN\"",
    "\"BETWEEN\"",
    "\"BINARY_INTEGER\"",
    "\"BODY\"",
    "\"BOOLEAN\"",
    "\"BY\"",
    "\"CASE\"",
    "\"CAST\"",
    "\"CHAR\"",
    "\"CLOSE\"",
    "\"CREATE\"",
    "\"COMMENT\"",
    "\"COMMIT\"",
    "\"CONNECT\"",
    "\"CONSTANT\"",
    "\"CURRENT\"",
    "\"CURSOR\"",
    "\"DATE\"",
    "\"DECIMAL\"",
    "\"DECLARE\"",
    "\"DEFAULT\"",
    "\"DELETE\"",
    "\"DESC\"",
    "\"DISTINCT\"",
    "\"DO\"",
    "\"ELSE\"",
    "\"ELSIF\"",
    "\"END\"",
    "\"EXCEPTION\"",
    "\"EXCEPTION_INIT\"",
    "\"EXCLUSIVE\"",
    "\"EXISTS\"",
    "\"EXIT\"",
    "\"FETCH\"",
    "\"FLOAT\"",
    "\"FOR\"",
    "\"FROM\"",
    "\"FUNCTION\"",
    "\"GOTO\"",
    "\"GROUP\"",
    "\"HAVING\"",
    "\"IF\"",
    "\"IN\"",
    "\"INDEX\"",
    "\"INSERT\"",
    "\"INTEGER\"",
    "\"INTERSECT\"",
    "\"INTO\"",
    "\"IS\"",
    "\"JOIN\"",
    "\"LEVEL\"",
    "\"LIKE\"",
    "\"LOCK\"",
    "\"LOOP\"",
    "\"MINUS\"",
    "\"MODE\"",
    "\"NATURAL\"",
    "\"NOT\"",
    "\"NOWAIT\"",
    "\"NULL\"",
    "\"NUMBER\"",
    "\"OF\"",
    "\"ONLY\"",
    "\"OPEN\"",
    "\"OR\"",
    "\"ON\"",
    "\"ORDER\"",
    "\"OTHERS\"",
    "\"OUT\"",
    "\"PACKAGE\"",
    "\"POSITIVE\"",
    "\"PRAGMA\"",
    "\"PRIOR\"",
    "\"PROCEDURE\"",
    "\"RAISE\"",
    "\"READ\"",
    "\"REAL\"",
    "\"RECORD\"",
    "\"REF\"",
    "\"RETURN\"",
    "\"REPLACE\"",
    "\"REVERSE\"",
    "\"ROLLBACK\"",
    "\"ROW\"",
    "\"SAVEPOINT\"",
    "\"SEGMENT\"",
    "\"SELECT\"",
    "\"SET\"",
    "\"SHARE\"",
    "\"SMALLINT\"",
    "\"SQL\"",
    "\"START\"",
    "\"TABLE\"",
    "\"THEN\"",
    "\"TO\"",
    "\"TRANSACTION\"",
    "\"TYPE\"",
    "\"UNION\"",
    "\"UPDATE\"",
    "\"USE\"",
    "\"VALUES\"",
    "\"VARCHAR2\"",
    "\"VARCHAR\"",
    "\"WHEN\"",
    "\"WHERE\"",
    "\"WHILE\"",
    "\"WITH\"",
    "\"WORK\"",
    "\"WRITE\"",
    "<S_NUMBER>",
    "<FLOAT>",
    "<INTEGER>",
    "<DIGIT>",
    "<LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "<S_IDENTIFIER>",
    "<LETTER>",
    "<SPECIAL_CHARS>",
    "<S_BIND>",
    "<S_CHAR_LITERAL>",
    "<S_QUOTED_IDENTIFIER>",
    "\"%TYPE\"",
    "\"%ROWTYPE\"",
    "\"<<\"",
    "\">>\"",
    "\"**\"",
    "\"%FOUND\"",
    "\"%NOTFOUND\"",
    "\"%ISOPEN\"",
    "\"%ROWCOUNT\"",
    "\".*\"",
  };

}
